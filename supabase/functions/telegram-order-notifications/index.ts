
import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    )

    const { orderId, orderData, promptText } = await req.json()

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const { data: adminSettings } = await supabaseClient
      .from('admin_telegram_settings')
      .select('chat_id')
      .eq('is_active', true)
      .single()

    if (!adminSettings) {
      throw new Error('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    const message = `üÜï <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${orderId.slice(-8)}</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${orderData.contact_name}
üìß <b>Email:</b> ${orderData.contact_email}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${orderData.contact_phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}

üéØ <b>–£—Å–ª—É–≥–∞:</b> ${orderData.service_name}
üí∞ <b>–ë—é–¥–∂–µ—Ç:</b> ${orderData.estimated_price ? (orderData.estimated_price / 100) + '‚ÇΩ' : '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚è∞ <b>–î–µ–¥–ª–∞–π–Ω:</b> ${orderData.deadline || '–ù–µ —É–∫–∞–∑–∞–Ω'}

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
${orderData.details}

${orderData.additional_requirements ? `üìã <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>\n${orderData.additional_requirements}\n` : ''}

ü§ñ <b>–ü–†–û–ú–ü–¢ –î–õ–Ø OPENAI:</b>
<code>${promptText}</code>

üìä <b>–î–µ–π—Å—Ç–≤–∏—è:</b>
‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É
‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞`

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    const telegramResponse = await fetch(
      `https://api.telegram.org/bot${Deno.env.get('TELEGRAM_BOT_TOKEN')}/sendMessage`,
      {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: adminSettings.chat_id,
          text: message,
          parse_mode: 'HTML',
          disable_web_page_preview: true
        })
      }
    )

    if (!telegramResponse.ok) {
      const error = await telegramResponse.json()
      throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: ${error.description}`)
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ - –æ—Ç–º–µ—á–∞–µ–º —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    await supabaseClient
      .from('orders')
      .update({
        telegram_sent_at: new Date().toISOString(),
        generated_prompt: promptText
      })
      .eq('id', orderId)

    return new Response(
      JSON.stringify({ success: true, message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    )

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error)
    return new Response(
      JSON.stringify({ error: error.message }),
      { 
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    )
  }
})
