
import { useState } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useUnifiedAuth } from '@/contexts/UnifiedAuthContext';
import { toast } from 'sonner';
import { useTelegramNotifications } from './useTelegramNotifications';

export interface SmartOrderData {
  // Service details
  serviceType: string;
  serviceSubtype?: string;
  
  // Project details
  projectTitle: string;
  targetAudience: string;
  projectGoals: string;
  competitorUrls: string[];
  
  // Content requirements
  characterCount: number;
  keywordsMode: 'client' | 'auto' | 'ai';
  keywords: string[];
  toneOfVoice: string;
  contentStructure: string[];
  
  // Pricing
  basePrice: number;
  totalPrice: number;
  urgencyMultiplier: number;
  additionalServices: string[];
  
  // Contact
  contactName: string;
  contactEmail: string;
  contactPhone: string;
  contactCompany: string;
  
  // Technical
  deadline: string;
  specialRequirements: string;
  previousExperience: boolean;
}

export function useSmartOrderIntegration() {
  const { user } = useUnifiedAuth();
  const [loading, setLoading] = useState(false);
  const { sendOrderNotification } = useTelegramNotifications();

  const generateOrderId = () => {
    const timestamp = Date.now().toString(36);
    const random = Math.random().toString(36).substr(2, 5);
    return `SO_${timestamp}_${random}`;
  };

  const createSmartOrder = async (orderData: SmartOrderData) => {
    setLoading(true);
    
    try {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —É–º–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç —Ç–∞–±–ª–∏—Ü—ã orders
      const transformedData = {
        service_slug: orderData.serviceType,
        service_name: getServiceName(orderData.serviceType),
        contact_name: orderData.contactName,
        contact_email: orderData.contactEmail,
        contact_phone: orderData.contactPhone || null,
        details: buildOrderDetails(orderData),
        additional_requirements: orderData.specialRequirements || null,
        estimated_price: Math.round(orderData.totalPrice * 100), // –í –∫–æ–ø–µ–π–∫–∞—Ö
        deadline: orderData.deadline ? new Date(orderData.deadline).toISOString().split('T')[0] : null,
        user_id: user?.id || null,
        service_options: {
          serviceSubtype: orderData.serviceSubtype,
          characterCount: orderData.characterCount,
          keywordsMode: orderData.keywordsMode,
          keywords: orderData.keywords,
          toneOfVoice: orderData.toneOfVoice,
          contentStructure: orderData.contentStructure,
          targetAudience: orderData.targetAudience,
          projectGoals: orderData.projectGoals,
          competitorUrls: orderData.competitorUrls,
          basePrice: orderData.basePrice,
          urgencyMultiplier: orderData.urgencyMultiplier,
          additionalServices: orderData.additionalServices,
          contactCompany: orderData.contactCompany,
          previousExperience: orderData.previousExperience
        },
        technical_specification: {
          service_type: orderData.serviceType,
          requirements: {
            target_audience: orderData.targetAudience,
            style: orderData.toneOfVoice,
            keywords: orderData.keywords,
            character_count: orderData.characterCount,
            additional_features: orderData.additionalServices
          },
          client_brief: buildOrderDetails(orderData),
          additional_requirements: orderData.specialRequirements || '',
          deadline: orderData.deadline,
          estimated_cost: orderData.totalPrice
        }
      };

      console.log('Creating smart order with data:', transformedData);

      const { data, error } = await supabase
        .from('orders')
        .insert(transformedData)
        .select()
        .single();

      if (error) {
        console.error('Smart order creation error:', error);
        throw error;
      }

      console.log('Smart order created successfully:', data);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
      try {
        await sendOrderNotification(data.id, {
          ...transformedData,
          ...data
        });
      } catch (notificationError) {
        console.error('Telegram notification error:', notificationError);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      }

      // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
      if (user) {
        try {
          const { error: notificationError } = await supabase
            .from('notifications')
            .insert({
              user_id: user.id,
              title: '–£–º–Ω—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω',
              message: `–í–∞—à –∑–∞–∫–∞–∑ "${transformedData.service_name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ —É–º–Ω—É—é —Ñ–æ—Ä–º—É. –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${data.id.slice(-8)}`,
              type: 'success'
            });

          if (notificationError) {
            console.error('User notification creation error:', notificationError);
          }
        } catch (notificationError) {
          console.error('User notification error:', notificationError);
        }
      }

      // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
      localStorage.removeItem('smart-order-draft');

      toast.success('üéâ –£–º–Ω—ã–π –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', {
        description: `–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${data.id.slice(-8)}. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç`
      });

      return { success: true, order: data };
    } catch (error: any) {
      console.error('Error creating smart order:', error);
      
      let errorMessage = '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑';
      if (error.message?.includes('violates row-level security')) {
        errorMessage = '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –∫–∞–∫ –≥–æ—Å—Ç—å';
      } else if (error.message) {
        errorMessage = error.message;
      }
      
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞', {
        description: errorMessage
      });
      
      return { success: false, error: error.message };
    } finally {
      setLoading(false);
    }
  };

  const getServiceName = (serviceSlug: string): string => {
    const serviceNames: Record<string, string> = {
      'seo-article': 'SEO-—Å—Ç–∞—Ç—å—è',
      'landing-page': '–ü—Ä–æ–¥–∞—é—â–∏–π –ª–µ–Ω–¥–∏–Ω–≥',
      'email-campaigns': 'Email-–∫–∞–º–ø–∞–Ω–∏—è',
      'telegram-content': '–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è Telegram',
      'chatbot-scripts': '–°–∫—Ä–∏–ø—Ç—ã –¥–ª—è —á–∞—Ç-–±–æ—Ç–∞',
      'website-texts': '–¢–µ–∫—Å—Ç—ã –¥–ª—è —Å–∞–π—Ç–∞',
      'instagram': '–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è Instagram',
      'linkedin': '–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è LinkedIn',
      'youtube': '–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è YouTube',
      'ozon': '–¢–µ–∫—Å—Ç—ã –¥–ª—è Ozon',
      'wildberries': '–¢–µ–∫—Å—Ç—ã –¥–ª—è Wildberries'
    };
    
    return serviceNames[serviceSlug] || '–ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥';
  };

  const buildOrderDetails = (orderData: SmartOrderData): string => {
    const details = [];
    
    details.push(`üìã –ü–†–û–ï–ö–¢: ${orderData.projectTitle}`);
    details.push(`üéØ –¶–ï–õ–ï–í–ê–Ø –ê–£–î–ò–¢–û–†–ò–Ø: ${orderData.targetAudience}`);
    details.push(`üéØ –¶–ï–õ–ò –ü–†–û–ï–ö–¢–ê: ${orderData.projectGoals}`);
    
    if (orderData.competitorUrls.length > 0) {
      details.push(`üîç –ö–û–ù–ö–£–†–ï–ù–¢–´: ${orderData.competitorUrls.join(', ')}`);
    }
    
    details.push(`üìè –û–ë–™–ï–ú: ${orderData.characterCount} —Å–∏–º–≤–æ–ª–æ–≤`);
    details.push(`üé® –¢–û–ù–ê–õ–¨–ù–û–°–¢–¨: ${orderData.toneOfVoice}`);
    
    if (orderData.keywords.length > 0) {
      details.push(`üîë –ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê: ${orderData.keywords.join(', ')}`);
    }
    
    if (orderData.contentStructure.length > 0) {
      details.push(`üìù –°–¢–†–£–ö–¢–£–†–ê: ${orderData.contentStructure.join(', ')}`);
    }
    
    if (orderData.additionalServices.length > 0) {
      details.push(`‚ûï –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: ${orderData.additionalServices.join(', ')}`);
    }
    
    details.push(`üí∞ –°–¢–û–ò–ú–û–°–¢–¨: ${orderData.totalPrice.toLocaleString()} ‚ÇΩ`);
    
    if (orderData.contactCompany) {
      details.push(`üè¢ –ö–û–ú–ü–ê–ù–ò–Ø: ${orderData.contactCompany}`);
    }
    
    return details.join('\n');
  };

  return {
    createSmartOrder,
    loading
  };
}
