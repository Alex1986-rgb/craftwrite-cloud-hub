
import React, { useState, useEffect, useRef } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { MessageCircle, Send, Bot, User, Zap, Clock, CheckCircle2 } from 'lucide-react';

interface Message {
  id: string;
  type: 'user' | 'bot';
  content: string;
  timestamp: Date;
  isTyping?: boolean;
  quickReplies?: string[];
  suggestions?: string[];
}

interface ChatBotProps {
  isOpen: boolean;
  onClose: () => void;
}

const quickStartQuestions = [
  "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç SEO-—Å—Ç–∞—Ç—å—è?",
  "–ö–∞–∫ –±—ã—Å—Ç—Ä–æ –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ª–µ–Ω–¥–∏–Ω–≥?",
  "–ö–∞–∫–∏–µ —É –≤–∞—Å –≥–∞—Ä–∞–Ω—Ç–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞?",
  "–†–∞–±–æ—Ç–∞–µ—Ç–µ –ª–∏ —Å –º–æ–µ–π –Ω–∏—à–µ–π?",
  "–ú–æ–∂–µ—Ç–µ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç?",
  "–ö–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–ø–ª–∞—Ç–∞?"
];

const botResponses: { [key: string]: string } = {
  "—Å—Ç–æ–∏–º–æ—Å—Ç—å": "–¶–µ–Ω—ã –Ω–∞ –Ω–∞—à–∏ —É—Å–ª—É–≥–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –æ—Ç 800‚ÇΩ –∑–∞ SEO-—Å—Ç–∞—Ç—å—é –¥–æ 1000 —Å–ª–æ–≤. –¢–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –æ–±—ä–µ–º–∞. –ú–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–æ—á–Ω—É—é —Ü–µ–Ω—É –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞!",
  "—Å—Ä–æ–∫–∏": "–û–±—ã—á–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–∫–∞–∑—ã –∑–∞ 3-7 –¥–Ω–µ–π. –î–ª—è —Å—Ä–æ—á–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —ç–∫—Å–ø—Ä–µ—Å—Å-–¥–æ—Å—Ç–∞–≤–∫—É –∑–∞ 24-48 —á–∞—Å–æ–≤ —Å –Ω–∞—Ü–µ–Ω–∫–æ–π 50%. –ö–∞–∫–∏–µ —É –≤–∞—Å —Å—Ä–æ–∫–∏?",
  "–≥–∞—Ä–∞–Ω—Ç–∏–∏": "–ú—ã –¥–∞–µ–º 100% –≥–∞—Ä–∞–Ω—Ç–∏—é –∫–∞—á–µ—Å—Ç–≤–∞: —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¢–ó, –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–∞–≤–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π. –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —É—Å—Ç—Ä–æ–∏—Ç - –≤–µ—Ä–Ω–µ–º –¥–µ–Ω—å–≥–∏!",
  "–ø—Ä–∏–º–µ—Ä—ã": "–ö–æ–Ω–µ—á–Ω–æ! –£ –Ω–∞—Å –µ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∏–∑ 500+ –ø—Ä–æ–µ–∫—Ç–æ–≤. –ú–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –∫–µ–π—Å—ã –ø–æ –≤–∞—à–µ–π —Ç–µ–º–∞—Ç–∏–∫–µ. –í –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?",
  "–æ–ø–ª–∞—Ç–∞": "–ü—Ä–∏–Ω–∏–º–∞–µ–º –æ–ø–ª–∞—Ç—É –∫–∞—Ä—Ç–æ–π, –ø–µ—Ä–µ–≤–æ–¥–æ–º –∏–ª–∏ –ø–æ —Å—á–µ—Ç—É –¥–ª—è —é—Ä–ª–∏—Ü. –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ 50%, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –ø–æ—Å–ª–µ —Å–¥–∞—á–∏ —Ä–∞–±–æ—Ç—ã. –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏ —É–¥–æ–±–Ω–æ!",
  "default": "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –Ø –ø–µ—Ä–µ–¥–∞–º –≤–∞—Å –Ω–∞—à–µ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É, –∫–æ—Ç–æ—Ä—ã–π –¥–∞—Å—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é. –û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç - –º—ã —Å–≤—è–∂–µ–º—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç."
};

export default function SmartChatBot({ isOpen, onClose }: ChatBotProps) {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      type: 'bot',
      content: '–ü—Ä–∏–≤–µ—Ç! –Ø AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç CopyPro Cloud üëã\n\n–ü–æ–º–æ–≥—É —Å –≤—ã–±–æ—Ä–æ–º —É—Å–ª—É–≥, —Ä–∞—Å—á–µ—Ç–æ–º —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –æ—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.',
      timestamp: new Date(),
      quickReplies: quickStartQuestions.slice(0, 3)
    }
  ]);
  const [inputValue, setInputValue] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const simulateTyping = () => {
    setIsTyping(true);
    return new Promise(resolve => setTimeout(resolve, 1500));
  };

  const getBotResponse = (userMessage: string): string => {
    const message = userMessage.toLowerCase();
    
    if (message.includes('—Å—Ç–æ–∏–º–æ—Å—Ç—å') || message.includes('—Ü–µ–Ω–∞') || message.includes('—Å–∫–æ–ª—å–∫–æ')) {
      return botResponses.—Å—Ç–æ–∏–º–æ—Å—Ç—å;
    }
    if (message.includes('—Å—Ä–æ–∫–∏') || message.includes('–±—ã—Å—Ç—Ä–æ') || message.includes('–≤—Ä–µ–º—è')) {
      return botResponses.—Å—Ä–æ–∫–∏;
    }
    if (message.includes('–≥–∞—Ä–∞–Ω—Ç–∏–∏') || message.includes('–∫–∞—á–µ—Å—Ç–≤–æ')) {
      return botResponses.–≥–∞—Ä–∞–Ω—Ç–∏–∏;
    }
    if (message.includes('–ø—Ä–∏–º–µ—Ä—ã') || message.includes('—Ä–∞–±–æ—Ç—ã') || message.includes('–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ')) {
      return botResponses.–ø—Ä–∏–º–µ—Ä—ã;
    }
    if (message.includes('–æ–ø–ª–∞—Ç–∞') || message.includes('–ø–ª–∞—Ç–∏—Ç—å') || message.includes('—Å—á–µ—Ç')) {
      return botResponses.–æ–ø–ª–∞—Ç–∞;
    }
    
    return botResponses.default;
  };

  const handleSendMessage = async (content: string) => {
    if (!content.trim()) return;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: content.trim(),
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');

    // –ò–º–∏—Ç–∞—Ü–∏—è –ø–µ—á–∞—Ç–∏
    await simulateTyping();
    setIsTyping(false);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
    const botResponse = getBotResponse(content);
    const botMessage: Message = {
      id: (Date.now() + 1).toString(),
      type: 'bot',
      content: botResponse,
      timestamp: new Date(),
      quickReplies: content.toLowerCase().includes('–ø—Ä–∏–º–µ—Ä—ã') 
        ? ["–ü–æ–∫–∞–∑–∞—Ç—å –∫–µ–π—Å—ã e-commerce", "–ö–µ–π—Å—ã –¥–ª—è SaaS", "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã"]
        : content.toLowerCase().includes('—Å—Ç–æ–∏–º–æ—Å—Ç—å')
        ? ["–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–æ—á–Ω—É—é —Ü–µ–Ω—É", "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã", "–ï—Å—Ç—å –ª–∏ —Å–∫–∏–¥–∫–∏?"]
        : ["–ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å", "–°–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"]
    };

    setMessages(prev => [...prev, botMessage]);
  };

  const handleQuickReply = (reply: string) => {
    handleSendMessage(reply);
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/20 backdrop-blur-sm z-50 flex items-end justify-end p-4">
      <Card className="w-full max-w-md h-[600px] shadow-2xl border-0 bg-white flex flex-col">
        <CardHeader className="bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-t-lg p-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="relative">
                <Bot className="w-8 h-8" />
                <div className="absolute -bottom-1 -right-1 w-3 h-3 bg-green-400 rounded-full border-2 border-white"></div>
              </div>
              <div>
                <CardTitle className="text-lg">AI –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç</CardTitle>
                <p className="text-sm opacity-90">–û–Ω–ª–∞–π–Ω ‚Ä¢ –û—Ç–≤–µ—á–∞—é –º–≥–Ω–æ–≤–µ–Ω–Ω–æ</p>
              </div>
            </div>
            <Button variant="ghost" size="sm" onClick={onClose} className="text-white hover:bg-white/20">
              ‚úï
            </Button>
          </div>
        </CardHeader>

        <CardContent className="flex-1 flex flex-col p-0">
          {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
          <div className="flex-1 overflow-y-auto p-4 space-y-4">
            {messages.map((message) => (
              <div key={message.id} className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}>
                <div className={`flex gap-3 max-w-[85%] ${message.type === 'user' ? 'flex-row-reverse' : 'flex-row'}`}>
                  <div className={`w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 ${
                    message.type === 'user' ? 'bg-blue-600' : 'bg-gray-200'
                  }`}>
                    {message.type === 'user' ? (
                      <User className="w-4 h-4 text-white" />
                    ) : (
                      <Bot className="w-4 h-4 text-gray-600" />
                    )}
                  </div>
                  
                  <div className={`rounded-lg px-4 py-3 ${
                    message.type === 'user' 
                      ? 'bg-blue-600 text-white' 
                      : 'bg-gray-100 text-gray-800'
                  }`}>
                    <div className="whitespace-pre-wrap text-sm">{message.content}</div>
                    <div className={`text-xs mt-1 ${
                      message.type === 'user' ? 'text-blue-100' : 'text-gray-500'
                    }`}>
                      {message.timestamp.toLocaleTimeString('ru-RU', { 
                        hour: '2-digit', 
                        minute: '2-digit' 
                      })}
                    </div>
                  </div>
                </div>
              </div>
            ))}

            {/* –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã */}
            {messages[messages.length - 1]?.type === 'bot' && messages[messages.length - 1]?.quickReplies && (
              <div className="space-y-2">
                <div className="text-xs text-gray-500 px-1">–ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã:</div>
                <div className="flex flex-wrap gap-2">
                  {messages[messages.length - 1].quickReplies!.map((reply, index) => (
                    <Button
                      key={index}
                      variant="outline"
                      size="sm"
                      onClick={() => handleQuickReply(reply)}
                      className="text-xs hover:bg-blue-50 hover:border-blue-300"
                    >
                      {reply}
                    </Button>
                  ))}
                </div>
              </div>
            )}

            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏ */}
            {isTyping && (
              <div className="flex justify-start">
                <div className="flex gap-3 max-w-[85%]">
                  <div className="w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center flex-shrink-0">
                    <Bot className="w-4 h-4 text-gray-600" />
                  </div>
                  <div className="bg-gray-100 rounded-lg px-4 py-3">
                    <div className="flex items-center gap-1">
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                    </div>
                  </div>
                </div>
              </div>
            )}

            <div ref={messagesEndRef} />
          </div>

          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          <div className="px-4 py-2 bg-gray-50 border-t">
            <div className="flex items-center justify-between text-xs text-gray-600">
              <div className="flex items-center gap-4">
                <div className="flex items-center gap-1">
                  <Zap className="w-3 h-3" />
                  <span>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: 2 —Å–µ–∫</span>
                </div>
                <div className="flex items-center gap-1">
                  <CheckCircle2 className="w-3 h-3" />
                  <span>–†–µ—à–∞–µ–º 89% –≤–æ–ø—Ä–æ—Å–æ–≤</span>
                </div>
              </div>
            </div>
          </div>

          {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
          <div className="p-4 border-t">
            <div className="flex gap-2">
              <Input
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."
                onKeyPress={(e) => e.key === 'Enter' && handleSendMessage(inputValue)}
                className="flex-1"
              />
              <Button 
                onClick={() => handleSendMessage(inputValue)}
                disabled={!inputValue.trim() || isTyping}
                size="sm"
                className="bg-blue-600 hover:bg-blue-700"
              >
                <Send className="w-4 h-4" />
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
