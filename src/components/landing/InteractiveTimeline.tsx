import { useState } from "react";
import { Badge } from "@/components/ui/badge";
import { CheckCircle, Clock, Zap, Target } from "lucide-react";
import HolographicCard from "./HolographicCard";

const TIMELINE_STEPS = [
  {
    day: "–î–µ–Ω—å 1",
    phase: "–ê–Ω–∞–ª–∏–∑ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
    description: "–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤, –ø–æ–¥–±–æ—Ä —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —è–¥—Ä–∞, —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞",
    icon: Target,
    color: "from-blue-500 to-cyan-400",
    details: [
      "–ê–Ω–∞–ª–∏–∑ –¢–û–ü-10 –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤",
      "–ü–æ–¥–±–æ—Ä 500+ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤",
      "LSI-—Å–µ–º–∞–Ω—Ç–∏–∫–∞ –∏ —Å–∏–Ω–æ–Ω–∏–º—ã",
      "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ"
    ]
  },
  {
    day: "–î–µ–Ω—å 2",
    phase: "AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è + —ç–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞",
    description: "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é AI –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞",
    icon: Zap,
    color: "from-purple-500 to-pink-400",
    details: [
      "AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
      "–ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏-–∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä–∞–º–∏", 
      "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–¥ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã",
      "–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∞—Ç–µ–≥–æ–≤"
    ]
  },
  {
    day: "–î–µ–Ω—å 3",
    phase: "–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏ –¥–æ—Å—Ç–∞–≤–∫–∞",
    description: "–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ",
    icon: CheckCircle,
    color: "from-green-500 to-emerald-400",
    details: [
      "–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å",
      "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Excel/CSV",
      "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è",
      "–ì–æ—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π"
    ]
  }
];

export default function InteractiveTimeline() {
  const [activeStep, setActiveStep] = useState(0);

  return (
    <div className="max-w-6xl mx-auto py-16">
      <div className="text-center mb-12">
        <Badge className="glass-holographic px-6 py-3 text-lg mb-6">
          ‚è±Ô∏è 3-–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ü–∏–∫–ª
        </Badge>
        <h3 className="text-3xl md:text-4xl font-bold text-holographic mb-4">
          –ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–≤—ã—à–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
        </h3>
        <p className="text-xl text-muted-foreground max-w-3xl mx-auto">
          –ö–∞–∂–¥—ã–π —ç—Ç–∞–ø —Ä–∞–±–æ—Ç—ã –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç—Å—è —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        </p>
      </div>

      {/* Timeline Navigation */}
      <div className="flex justify-center mb-12">
        <div className="flex space-x-4">
          {TIMELINE_STEPS.map((step, index) => {
            const IconComponent = step.icon;
            return (
              <button
                key={index}
                onClick={() => setActiveStep(index)}
                className={`px-6 py-3 rounded-xl transition-all duration-300 ${
                  activeStep === index
                    ? 'glass-ultra text-primary'
                    : 'glass-panel text-muted-foreground hover:glass-interactive'
                }`}
              >
                <div className="flex items-center space-x-2">
                  <IconComponent className="w-5 h-5" />
                  <span className="font-medium">{step.day}</span>
                </div>
              </button>
            );
          })}
        </div>
      </div>

      {/* Active Step Content */}
      <HolographicCard variant="ultra" className="p-8">
        <div className="grid md:grid-cols-2 gap-8 items-center">
          <div className="space-y-6">
            <div className="flex items-center space-x-4">
              <div className={`w-16 h-16 rounded-full bg-gradient-to-br ${TIMELINE_STEPS[activeStep].color} flex items-center justify-center`}>
                {(() => {
                  const IconComponent = TIMELINE_STEPS[activeStep].icon;
                  return <IconComponent className="w-8 h-8 text-white" />;
                })()}
              </div>
              <div>
                <h4 className="text-2xl font-bold text-holographic">
                  {TIMELINE_STEPS[activeStep].phase}
                </h4>
                <Badge variant="outline" className="mt-2">
                  {TIMELINE_STEPS[activeStep].day}
                </Badge>
              </div>
            </div>

            <p className="text-lg text-muted-foreground leading-relaxed">
              {TIMELINE_STEPS[activeStep].description}
            </p>

            <div className="space-y-3">
              {TIMELINE_STEPS[activeStep].details.map((detail, index) => (
                <div key={index} className="flex items-center space-x-3">
                  <CheckCircle className="w-5 h-5 text-green-500 flex-shrink-0" />
                  <span className="text-muted-foreground">{detail}</span>
                </div>
              ))}
            </div>
          </div>

          <div className="relative">
            {/* 3D Visualization */}
            <div className="glass-holographic p-8 rounded-2xl">
              <div className="space-y-4">
                <div className="flex justify-between items-center">
                  <span className="text-sm text-muted-foreground">–ü—Ä–æ–≥—Ä–µ—Å—Å —ç—Ç–∞–ø–∞</span>
                  <Badge className="neon-glow">
                    {Math.round(((activeStep + 1) / TIMELINE_STEPS.length) * 100)}%
                  </Badge>
                </div>
                
                <div className="relative h-4 bg-muted/20 rounded-full overflow-hidden">
                  <div 
                    className="h-full bg-gradient-to-r from-blue-500 to-purple-500 rounded-full transition-all duration-1000 morphing-gradient"
                    style={{ width: `${((activeStep + 1) / TIMELINE_STEPS.length) * 100}%` }}
                  />
                </div>

                <div className="grid grid-cols-3 gap-4 mt-8">
                  {TIMELINE_STEPS.map((step, index) => (
                    <div
                      key={index}
                      className={`text-center p-3 rounded-lg transition-all duration-300 ${
                        index <= activeStep
                          ? 'glass-interactive text-primary'
                          : 'glass-panel text-muted-foreground'
                      }`}
                    >
                      <div className="text-2xl mb-2">
                        {index <= activeStep ? '‚úÖ' : '‚è≥'}
                      </div>
                      <div className="text-xs font-medium">{step.day}</div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        </div>
      </HolographicCard>

      {/* Quality Metrics */}
      <div className="grid md:grid-cols-3 gap-6 mt-12">
        {[
          { label: "–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–æ–≤", value: "99.8%", icon: "üéØ" },
          { label: "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫", value: "100%", icon: "üë®‚Äçüíº" },
          { label: "–î–Ω–µ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏", value: "30", icon: "üõ°Ô∏è" }
        ].map((metric, index) => (
          <HolographicCard key={index} variant="neon" className="p-6 text-center">
            <div className="text-4xl mb-3">{metric.icon}</div>
            <div className="text-3xl font-bold text-holographic mb-2">
              {metric.value}
            </div>
            <div className="text-sm text-muted-foreground">{metric.label}</div>
          </HolographicCard>
        ))}
      </div>
    </div>
  );
}