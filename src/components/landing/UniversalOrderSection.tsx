import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { ArrowRight, ArrowLeft, CheckCircle, FileText, Target, User, Zap } from "lucide-react";
import { useUnifiedOrderForm } from "@/hooks/useUnifiedOrderForm";
import { toast } from "@/hooks/use-toast";
import ModernTechnicalTaskStep from "@/components/order/advanced/ModernTechnicalTaskStep";
import ModernDetailedEstimate from "@/components/order/advanced/ModernDetailedEstimate";

interface ServiceType {
  id: string;
  title: string;
  description: string;
  examples: string[];
  icon: string;
}

const SERVICE_TYPES: ServiceType[] = [
  {
    id: "article",
    title: "–°—Ç–∞—Ç—å—è –∏–ª–∏ –æ–±–∑–æ—Ä",
    description: "–î–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ —Å–∞–π—Ç",
    examples: ["–°—Ç–∞—Ç—å—è –≤ –±–ª–æ–≥", "–û–±–∑–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤", "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª"],
    icon: "üìù"
  },
  {
    id: "selling-text",
    title: "–ü—Ä–æ–¥–∞—é—â–∏–π —Ç–µ–∫—Å—Ç",
    description: "–ß—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å –∫—É–ø–∏—Ç—å –≤–∞—à —Ç–æ–≤–∞—Ä –∏–ª–∏ —É—Å–ª—É–≥—É",
    examples: ["–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–æ–≤–∞—Ä–∞", "–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è"],
    icon: "üí∞"
  },
  {
    id: "social-posts",
    title: "–ü–æ—Å—Ç—ã –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π",
    description: "–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤",
    examples: ["–ü–æ—Å—Ç—ã –í–ö", "Telegram-–ø–æ—Å—Ç—ã", "Instagram-–∫–æ–Ω—Ç–µ–Ω—Ç"],
    icon: "üì±"
  },
  {
    id: "website-texts",
    title: "–¢–µ–∫—Å—Ç—ã –¥–ª—è —Å–∞–π—Ç–∞",
    description: "–†–∞–∑–¥–µ–ª—ã —Å–∞–π—Ç–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏—è",
    examples: ["–û –∫–æ–º–ø–∞–Ω–∏–∏", "–£—Å–ª—É–≥–∏", "–ö–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤"],
    icon: "üåê"
  },
  {
    id: "other",
    title: "–ß—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ",
    description: "–û–ø–∏—à–µ—Ç–µ —Å–≤–æ—é –∑–∞–¥–∞—á—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ",
    examples: ["Email-–ø–∏—Å—å–º–∞", "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏", "–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞"],
    icon: "üéØ"
  }
];

const STEP_ICONS = {
  1: Target,
  2: FileText,
  3: User,
  4: Zap,
  5: CheckCircle
};

export default function UniversalOrderSection() {
  const [isFormOpen, setIsFormOpen] = useState(false);
  const [selectedServiceType, setSelectedServiceType] = useState<ServiceType | null>(null);
  const [technicalTaskData, setTechnicalTaskData] = useState<any>({});
  const [estimateData, setEstimateData] = useState(null);
  const [isEstimateApproved, setIsEstimateApproved] = useState(false);
  
  const {
    currentStep,
    formData,
    loading,
    handleInputChange,
    handleServiceSelect,
    handleSubmit,
    isCurrentStepValid,
    goToNextStep,
    goToPreviousStep,
    setCurrentStep
  } = useUnifiedOrderForm({
    onSuccess: () => {
      setIsFormOpen(false);
      setSelectedServiceType(null);
      setTechnicalTaskData({});
      setEstimateData(null);
      setIsEstimateApproved(false);
      setCurrentStep(1);
      toast({
        title: "–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
        description: "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç"
      });
    }
  });

  const handleServiceTypeSelect = (serviceType: ServiceType) => {
    setSelectedServiceType(serviceType);
    handleServiceSelect(serviceType.title);
    goToNextStep();
  };

  const handleTechnicalTaskUpdate = (updates: any) => {
    setTechnicalTaskData(prev => ({ ...prev, ...updates }));
  };

  const handleCreateEstimate = async () => {
    if (!selectedServiceType) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–¢–∏–ø —É—Å–ª—É–≥–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω",
        variant: "destructive"
      });
      return;
    }

    console.log('Creating estimate with data:', {
      serviceType: selectedServiceType,
      formData,
      technicalTaskData
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!formData.details.trim()) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏",
        variant: "destructive"
      });
      return;
    }

    toast({
      title: "–°–æ–∑–¥–∞–Ω–∏–µ —Å–º–µ—Ç—ã...",
      description: "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ"
    });

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é —Å–º–µ—Ç—É —Å –≤—Å–µ–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const estimate = {
      serviceType: selectedServiceType.id,
      projectDetails: formData.details,
      keywords: technicalTaskData.keywords || [],
      lsiKeywords: technicalTaskData.lsiKeywords || [],
      contentStructure: technicalTaskData.contentStructure || [],
      totalWordCount: technicalTaskData.totalWordCount || 3000,
      targetAudience: technicalTaskData.targetAudience || '',
      competitorUrls: technicalTaskData.competitorUrls || [],
      contentGoals: technicalTaskData.contentGoals || '',
      additionalServices: [],
      urgencyMultiplier: 1,
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      contactInfo: {
        name: formData.name,
        email: formData.email,
        phone: formData.phone
      }
    };
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    setEstimateData(estimate);
    console.log('Estimate created successfully:', estimate);
    
    toast({
      title: "–°–º–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞!",
      description: "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å–º–µ—Ç—ã"
    });
    
    goToNextStep();
  };

  const handleEstimateApprove = () => {
    setIsEstimateApproved(true);
  };

  const handleFormSubmit = async () => {
    try {
      const estimatedPrice = calculatePrice();
      await handleSubmit(estimatedPrice);
    } catch (error: any) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message,
        variant: "destructive"
      });
    }
  };

  const calculatePrice = (): number => {
    if (!selectedServiceType) return 3000;
    
    const basePrices: Record<string, number> = {
      "article": 4000,
      "selling-text": 6000,
      "social-posts": 2500,
      "website-texts": 3500,
      "other": 4500
    };
    
    const basePrice = basePrices[selectedServiceType.id] || 4000;
    
    // Adjust price based on details length (rough complexity estimation)
    const detailsLength = formData.details.length;
    let multiplier = 1;
    
    if (detailsLength > 500) multiplier = 1.3;
    else if (detailsLength > 200) multiplier = 1.1;
    
    return Math.round(basePrice * multiplier);
  };

  const getSmartQuestions = (serviceType: ServiceType) => {
    const questionSets: Record<string, { placeholder: string; hints: string[] }> = {
      "article": {
        placeholder: "–ù–∞–ø—Ä–∏–º–µ—Ä: –°—Ç–∞—Ç—å—è –ø—Ä–æ –≤—ã–±–æ—Ä –¥–µ—Ç—Å–∫–æ–π –∫–æ–ª—è—Å–∫–∏ –Ω–∞ 3000 –∑–Ω–∞–∫–æ–≤. –ù—É–∂–Ω–æ —Ä–∞—Å–∫—Ä—ã—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –≤—ã–±–æ—Ä–∞, –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏ –≥–¥–µ –∫—É–ø–∏—Ç—å",
        hints: [
          "üìù –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –∏ –æ–±—ä–µ–º —Å—Ç–∞—Ç—å–∏",
          "üéØ –ö–∞–∫–∞—è —Ü–µ–ª—å —Å—Ç–∞—Ç—å–∏? (–ø—Ä–∏–≤–ª–µ—á—å –∫–ª–∏–µ–Ω—Ç–æ–≤, –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å, –ø—Ä–æ–¥–∞—Ç—å)",
          "üîç –ù—É–∂–Ω—ã –ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –Ø–Ω–¥–µ–∫—Å–µ/Google?"
        ]
      },
      "selling-text": {
        placeholder: "–ù–∞–ø—Ä–∏–º–µ—Ä: –ü—Ä–æ–¥–∞—é—â–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫—É—Ä—Å–∞ –ø–æ –∏–∑—É—á–µ–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è - –∑–∞–Ω—è—Ç—ã–µ –≤–∑—Ä–æ—Å–ª—ã–µ 25-40 –ª–µ—Ç",
        hints: [
          "üí° –ß—Ç–æ –ø—Ä–æ–¥–∞–µ—Ç–µ? (—Ç–æ–≤–∞—Ä, —É—Å–ª—É–≥–∞, –∫—É—Ä—Å)",
          "üë• –ö—Ç–æ –≤–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã? (–≤–æ–∑—Ä–∞—Å—Ç, –∏–Ω—Ç–µ—Ä–µ—Å—ã, –ø—Ä–æ–±–ª–µ–º—ã)",
          "‚≠ê –ö–∞–∫–∏–µ —É –≤–∞—Å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–¥ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏?"
        ]
      },
      "social-posts": {
        placeholder: "–ù–∞–ø—Ä–∏–º–µ—Ä: 10 –ø–æ—Å—Ç–æ–≤ –¥–ª—è Instagram —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã. –¢–µ–º—ã: –Ω–æ–≤—ã–µ —É—Å–ª—É–≥–∏, —É—Ö–æ–¥ –∑–∞ –∫–æ–∂–µ–π, –∞–∫—Ü–∏–∏",
        hints: [
          "üì± –î–ª—è –∫–∞–∫–æ–π —Å–æ—Ü—Å–µ—Ç–∏? (–í–ö, –¢–µ–ª–µ–≥—Ä–∞–º, –ò–Ω—Å—Ç–∞–≥—Ä–∞–º)",
          "üìä –°–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ–≤ –Ω—É–∂–Ω–æ?",
          "üé® –ö–∞–∫–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è? (–¥—Ä—É–∂–µ—Å–∫–∏–π, —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π, –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π)"
        ]
      },
      "website-texts": {
        placeholder: "–ù–∞–ø—Ä–∏–º–µ—Ä: –¢–µ–∫—Å—Ç—ã –¥–ª—è —Å–∞–π—Ç–∞ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏. –ù—É–∂–Ω—ã: –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –æ –∫–ª–∏–Ω–∏–∫–µ, —É—Å–ª—É–≥–∏ (–ª–µ—á–µ–Ω–∏–µ, –∏–º–ø–ª–∞–Ω—Ç–∞—Ü–∏—è, –æ—Ç–±–µ–ª–∏–≤–∞–Ω–∏–µ)",
        hints: [
          "üåê –ö–∞–∫–∏–µ —Ä–∞–∑–¥–µ–ª—ã —Å–∞–π—Ç–∞ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å?",
          "üè¢ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∏ —É—Å–ª—É–≥–∞—Ö",
          "üìç –ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å? (–¥–ª—è –º–µ—Å—Ç–Ω–æ–π SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏)"
        ]
      },
      "other": {
        placeholder: "–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞–º –Ω—É–∂–Ω–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤, —Å—Ü–µ–Ω–∞—Ä–∏–π –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫–∞, email-—Ä–∞—Å—Å—ã–ª–∫–∞",
        hints: [
          "üìã –ö–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–∫—Å—Ç–∞ –Ω—É–∂–µ–Ω?",
          "üéØ –ö–∞–∫–∞—è —Ü–µ–ª—å –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞?",
          "‚è∞ –ï—Å—Ç—å –ª–∏ –æ—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫–æ –≤—Ä–µ–º–µ–Ω–∏?"
        ]
      }
    };
    
    return questionSets[serviceType.id] || questionSets["other"];
  };

  if (!isFormOpen) {
    return (
      <section className="py-20 md:py-32 relative overflow-hidden bg-gradient-to-br from-slate-800 via-slate-900 to-slate-800">
        {/* Background */}
        <div className="absolute inset-0 bg-gradient-to-br from-primary/10 via-transparent to-accent/10"></div>
        <div className="absolute inset-0 bg-[radial-gradient(ellipse_at_center,_var(--tw-gradient-stops))] from-primary/20 via-transparent to-transparent"></div>
        
        <div className="container max-w-4xl mx-auto px-4 relative z-10 text-center">
          <div className="space-y-12 animate-fade-in">
            {/* Hero section with enhanced visuals */}
            <div className="space-y-8">
              <div className="space-y-4">
                <div className="inline-flex items-center gap-3 px-6 py-3 rounded-full glass-card text-white font-semibold text-sm mb-6">
                  <Zap className="w-4 h-4 text-blue-400" />
                  <span>–£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–∫–∞–∑–∞</span>
                </div>
                
                <h2 className="text-4xl md:text-6xl lg:text-7xl font-bold text-gradient leading-tight">
                  –ó–∞–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç
                </h2>
                <div className="text-xl md:text-2xl lg:text-3xl font-medium text-white max-w-4xl mx-auto leading-relaxed">
                  <span className="text-green-400 font-bold">3 –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–∞</span>
                  {" ‚Äî "}
                  <span className="text-blue-400 font-bold">—Ç–æ—á–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ 2 –º–∏–Ω—É—Ç—ã</span>
                </div>
              </div>

              {/* Key benefits with icons */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6 max-w-5xl mx-auto">
                <div className="flex items-center justify-center gap-3 p-4 rounded-2xl glass-card">
                  <CheckCircle className="w-6 h-6 text-green-400" />
                  <span className="font-semibold text-white">100% —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å</span>
                </div>
                <div className="flex items-center justify-center gap-3 p-4 rounded-2xl glass-card">
                  <Zap className="w-6 h-6 text-blue-400" />
                  <span className="font-semibold text-white">–û—Ç 24 —á–∞—Å–æ–≤</span>
                </div>
                <div className="flex items-center justify-center gap-3 p-4 rounded-2xl glass-card">
                  <Target className="w-6 h-6 text-purple-400" />
                  <span className="font-semibold text-white">–ì–∞—Ä–∞–Ω—Ç–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞</span>
                </div>
              </div>
            </div>

            {/* Enhanced process steps with animations */}
            <div className="space-y-8">
              <h3 className="text-2xl md:text-3xl font-bold text-center text-white">
                –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
              </h3>
              
              <div className="grid grid-cols-1 md:grid-cols-5 gap-6 lg:gap-8">
                {[
                  { step: 1, title: "–ß—Ç–æ –Ω—É–∂–Ω–æ?", desc: "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–µ–∫—Å—Ç–∞", color: "from-blue-500 to-cyan-500", bgColor: "from-blue-50 to-cyan-50" },
                  { step: 2, title: "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –¥–µ—Ç–∞–ª–∏", desc: "–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É", color: "from-green-500 to-emerald-500", bgColor: "from-green-50 to-emerald-50" },
                  { step: 3, title: "–ö–æ–Ω—Ç–∞–∫—Ç—ã", desc: "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ", color: "from-purple-500 to-violet-500", bgColor: "from-purple-50 to-violet-50" },
                  { step: 4, title: "–¢–µ—Ö–∑–∞–¥–∞–Ω–∏–µ", desc: "–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞", color: "from-orange-500 to-red-500", bgColor: "from-orange-50 to-red-50" },
                  { step: 5, title: "–°–º–µ—Ç–∞", desc: "–û–¥–æ–±—Ä–µ–Ω–∏–µ –∏ –æ–ø–ª–∞—Ç–∞", color: "from-pink-500 to-rose-500", bgColor: "from-pink-50 to-rose-50" }
                ].map((item, index) => (
                  <div key={item.step} className="flex flex-col items-center space-y-4 group">
                    <div className={`relative w-20 h-20 rounded-2xl bg-gradient-to-r ${item.color} text-white flex items-center justify-center text-xl font-bold shadow-lg hover:shadow-xl transition-all duration-300 group-hover:scale-110`}>
                      {item.step}
                      {index < 4 && (
                        <div className="hidden md:block absolute -right-8 top-1/2 transform -translate-y-1/2">
                          <ArrowRight className="w-5 h-5 text-slate-400" />
                        </div>
                      )}
                    </div>
                    <div className="text-center p-4 rounded-xl glass-card transition-all duration-300 group-hover:shadow-md">
                      <h4 className="font-semibold text-lg text-white">{item.title}</h4>
                      <p className="text-slate-300 text-sm mt-1">{item.desc}</p>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Enhanced CTA section */}
            <div className="space-y-6">
              <Button 
                size="lg" 
                onClick={() => setIsFormOpen(true)}
                className="group text-xl px-16 py-8 h-auto bg-gradient-to-r from-primary via-primary/90 to-accent hover:from-primary/90 hover:via-primary/80 hover:to-accent/90 shadow-2xl hover:shadow-3xl transition-all duration-500 transform hover:scale-105 rounded-2xl border-0 font-bold relative overflow-hidden"
              >
                <div className="absolute inset-0 bg-gradient-to-r from-white/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                <div className="relative flex items-center gap-3">
                  <Zap className="w-6 h-6 group-hover:rotate-12 transition-transform duration-300" />
                  –ù–∞—á–∞—Ç—å –∑–∞–∫–∞–∑ —Å–µ–π—á–∞—Å
                  <ArrowRight className="w-6 h-6 group-hover:translate-x-2 transition-transform duration-300" />
                </div>
              </Button>
              
              <div className="flex flex-col sm:flex-row items-center justify-center gap-6 text-sm text-slate-300">
                <div className="flex items-center gap-2">
                  <CheckCircle className="w-4 h-4 text-green-400" />
                  <span>–ë–µ–∑ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã</span>
                </div>
                <div className="flex items-center gap-2">
                  <CheckCircle className="w-4 h-4 text-green-400" />
                  <span>–ü—Ä–∞–≤–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ</span>
                </div>
                <div className="flex items-center gap-2">
                  <CheckCircle className="w-4 h-4 text-green-400" />
                  <span>–ì–∞—Ä–∞–Ω—Ç–∏—è 30 –¥–Ω–µ–π</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>
    );
  }

  return (
    <section className="py-16 md:py-24 relative overflow-hidden bg-gradient-to-br from-slate-800 via-slate-900 to-slate-800">
      <div className="absolute inset-0 bg-gradient-to-br from-primary/10 via-transparent to-accent/10"></div>
      
      <div className="container max-w-4xl mx-auto px-4 relative z-10">
        <Card className="shadow-2xl border-0 glass-card">
          <CardHeader className="text-center pb-8">
            <CardTitle className="text-3xl font-bold flex items-center justify-center gap-4 text-white">
              {React.createElement(STEP_ICONS[currentStep as keyof typeof STEP_ICONS], { 
                className: "h-8 w-8 text-blue-400" 
              })}
              –®–∞–≥ {currentStep} –∏–∑ 5
            </CardTitle>
            
            {/* Progress bar */}
            <div className="w-full bg-gray-200 rounded-full h-2 mt-6">
              <div 
                className="bg-gradient-to-r from-primary to-primary/80 h-2 rounded-full transition-all duration-500"
                style={{ width: `${(currentStep / 5) * 100}%` }}
              ></div>
            </div>
          </CardHeader>

          <CardContent className="space-y-8">
            {/* Step 1: Service Type Selection */}
            {currentStep === 1 && (
              <div className="space-y-6">
                <div className="text-center space-y-4">
                  <h3 className="text-2xl font-semibold">–ß—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ?</h3>
                  <p className="text-muted-foreground">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–µ–Ω</p>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {SERVICE_TYPES.map((serviceType) => (
                    <Card 
                      key={serviceType.id}
                      className={`cursor-pointer transition-all duration-200 hover:shadow-lg border-2 ${
                        selectedServiceType?.id === serviceType.id 
                          ? 'border-primary bg-primary/5' 
                          : 'border-gray-200 hover:border-primary/50'
                      }`}
                      onClick={() => handleServiceTypeSelect(serviceType)}
                    >
                      <CardContent className="p-6">
                        <div className="flex items-start space-x-4">
                          <div className="text-3xl">{serviceType.icon}</div>
                          <div className="flex-1 space-y-2">
                            <h4 className="font-semibold">{serviceType.title}</h4>
                            <p className="text-sm text-muted-foreground">{serviceType.description}</p>
                            <div className="flex flex-wrap gap-1">
                              {serviceType.examples.slice(0, 2).map((example, idx) => (
                                <span key={idx} className="text-xs bg-gray-100 px-2 py-1 rounded">
                                  {example}
                                </span>
                              ))}
                            </div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </div>
            )}

            {/* Step 2: Details */}
            {currentStep === 2 && selectedServiceType && (
              <div className="space-y-6">
                <div className="text-center space-y-4">
                  <h3 className="text-2xl font-semibold">–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ</h3>
                  <div className="flex items-center justify-center gap-2 text-primary">
                    <span className="text-2xl">{selectedServiceType.icon}</span>
                    <span className="font-medium">{selectedServiceType.title}</span>
                  </div>
                </div>

                {/* Smart hints */}
                <div className="bg-blue-50 rounded-lg p-4 space-y-2">
                  <div className="text-sm font-medium text-blue-800 mb-2">üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:</div>
                  {getSmartQuestions(selectedServiceType).hints.map((hint, idx) => (
                    <div key={idx} className="text-sm text-blue-700">{hint}</div>
                  ))}
                </div>

                <div className="space-y-6">
                  <div>
                    <Label htmlFor="details" className="text-base font-medium">
                      –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∑–∞–¥–∞—á—É *
                    </Label>
                    <Textarea
                      id="details"
                      name="details"
                      value={formData.details}
                      onChange={handleInputChange}
                      placeholder={getSmartQuestions(selectedServiceType).placeholder}
                      className="min-h-32 mt-2"
                      required
                    />
                    <div className="mt-1 text-xs text-muted-foreground">
                      –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—à–µ—Ç–µ, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥–µ—Ç —Ü–µ–Ω–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    </div>
                  </div>

                  <div>
                    <Label htmlFor="additionalRequirements" className="text-base font-medium">
                      –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è
                    </Label>
                    <Textarea
                      id="additionalRequirements"
                      name="additionalRequirements"
                      value={formData.additionalRequirements}
                      onChange={handleInputChange}
                      placeholder="–û—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å—Ç–∏–ª—é, –æ–±—ä–µ–º—É, —Å—Ä–æ–∫–∞–º..."
                      className="min-h-24 mt-2"
                    />
                  </div>
                </div>

                {/* Live price preview */}
                {formData.details && (
                  <div className="bg-green-50 rounded-lg p-4 text-center">
                    <div className="text-sm text-green-600 mb-1">–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</div>
                    <div className="text-xl font-bold text-green-700">
                      {calculatePrice().toLocaleString()} ‚ÇΩ
                    </div>
                    <div className="text-xs text-green-600">
                      {formData.details.length > 200 ? "–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ ‚Äî –±–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è —Ü–µ–Ω–∞!" : "–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –¥–ª—è —Ç–æ—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏"}
                    </div>
                  </div>
                )}

                <div className="flex gap-4">
                  <Button variant="outline" onClick={goToPreviousStep} className="flex-1">
                    <ArrowLeft className="w-4 h-4 mr-2" />
                    –ù–∞–∑–∞–¥
                  </Button>
                  <Button 
                    onClick={goToNextStep} 
                    disabled={!isCurrentStepValid()}
                    className="flex-1"
                  >
                    –î–∞–ª–µ–µ
                    <ArrowRight className="w-4 h-4 ml-2" />
                  </Button>
                </div>
              </div>
            )}

            {/* Step 3: Contact Info */}
            {currentStep === 3 && (
              <div className="space-y-6">
                <div className="text-center space-y-4">
                  <h3 className="text-2xl font-semibold">–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                  <p className="text-muted-foreground">–ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π</p>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <Label htmlFor="name" className="text-base font-medium">
                      –í–∞—à–µ –∏–º—è *
                    </Label>
                    <Input
                      id="name"
                      name="name"
                      value={formData.name}
                      onChange={handleInputChange}
                      placeholder="–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?"
                      className="mt-2"
                      required
                    />
                  </div>

                  <div>
                    <Label htmlFor="phone" className="text-base font-medium">
                      –¢–µ–ª–µ—Ñ–æ–Ω *
                    </Label>
                    <Input
                      id="phone"
                      name="phone"
                      value={formData.phone}
                      onChange={handleInputChange}
                      placeholder="+7 (999) 123-45-67"
                      className="mt-2"
                      required
                    />
                  </div>
                </div>

                <div>
                  <Label htmlFor="email" className="text-base font-medium">
                    Email *
                  </Label>
                  <Input
                    id="email"
                    name="email"
                    type="email"
                    value={formData.email}
                    onChange={handleInputChange}
                    placeholder="–ù–∞ —ç—Ç–æ—Ç email –æ—Ç–ø—Ä–∞–≤–∏–º –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç"
                    className="mt-2"
                    required
                  />
                  <div className="mt-1 text-xs text-muted-foreground">
                    üíå –ù–∞ email –ø—Ä–∏–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏ –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç
                  </div>
                </div>

                <div className="flex gap-4">
                  <Button variant="outline" onClick={goToPreviousStep} className="flex-1">
                    <ArrowLeft className="w-4 h-4 mr-2" />
                    –ù–∞–∑–∞–¥
                  </Button>
                  <Button 
                    onClick={goToNextStep}
                    disabled={!isCurrentStepValid()}
                    className="flex-1"
                  >
                    –î–∞–ª–µ–µ
                    <ArrowRight className="w-4 h-4 ml-2" />
                  </Button>
                </div>
              </div>
            )}

            {/* Step 4: Technical Task */}
            {currentStep === 4 && (
              <ModernTechnicalTaskStep
                formData={technicalTaskData}
                onUpdate={handleTechnicalTaskUpdate}
                onNext={handleCreateEstimate}
                onPrevious={goToPreviousStep}
              />
            )}

            {/* Step 5: Detailed Estimate */}
            {currentStep === 5 && estimateData && (
              <div className="space-y-6">
                <div className="text-center space-y-2 mb-6">
                  <h3 className="text-2xl font-semibold">–î–µ—Ç–∞–ª—å–Ω–∞—è —Å–º–µ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞</h3>
                  <p className="text-muted-foreground">
                    –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø–ª–∞–Ω–æ–º —Ä–∞–±–æ—Ç –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
                  </p>
                </div>
                
                <ModernDetailedEstimate
                  serviceType={estimateData.serviceType}
                  projectDetails={estimateData.projectDetails}
                  keywords={estimateData.keywords}
                  lsiKeywords={estimateData.lsiKeywords}
                  contentStructure={estimateData.contentStructure}
                  totalWordCount={estimateData.totalWordCount}
                  targetAudience={estimateData.targetAudience}
                  competitorUrls={estimateData.competitorUrls}
                  additionalServices={estimateData.additionalServices}
                  urgencyMultiplier={estimateData.urgencyMultiplier}
                  onEdit={() => setCurrentStep(4)}
                  onApprove={handleEstimateApprove}
                  onPayment={handleFormSubmit}
                />
              </div>
            )}
          </CardContent>
        </Card>

        {/* Close button */}
        <div className="text-center mt-6">
          <Button 
            variant="ghost" 
            onClick={() => {
              setIsFormOpen(false);
              setSelectedServiceType(null);
              setTechnicalTaskData({});
              setEstimateData(null);
              setIsEstimateApproved(false);
              setCurrentStep(1);
            }}
            className="text-muted-foreground hover:text-foreground"
          >
            –ó–∞–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É
          </Button>
        </div>
      </div>
    </section>
  );
}