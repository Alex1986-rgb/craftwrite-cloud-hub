
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { toast } from "@/hooks/use-toast";
import { Send, Mail, User, MessageSquare } from "lucide-react";
import { EnhancedFormField } from "@/components/ui/enhanced-form-field";
import { ProgressiveTextarea } from "@/components/ui/progressive-textarea";

export default function ContactForm() {
  const [form, setForm] = useState({ name: "", email: "", message: "" });
  const [loading, setLoading] = useState(false);
  const [errors, setErrors] = useState<{ [key: string]: string }>({});

  function handleChange(e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) {
    const { name, value } = e.target;
    setForm({ ...form, [name]: value });
    
    // –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –≤–≤–æ–¥–µ
    if (errors[name]) {
      setErrors(prev => ({ ...prev, [name]: '' }));
    }
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π
  const validateField = (name: string, value: string): string | null => {
    switch (name) {
      case 'name':
        if (!value.trim()) return '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
        if (value.length < 2) return '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞';
        return null;
      case 'email':
        if (!value.trim()) return 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(value)) return '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email';
        return null;
      case 'message':
        if (!value.trim()) return '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
        if (value.length < 10) return '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤';
        return null;
      default:
        return null;
    }
  };

  function handleSubmit(e: React.FormEvent) {
    e.preventDefault();
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
    const newErrors: { [key: string]: string } = {};
    Object.entries(form).forEach(([key, value]) => {
      const error = validateField(key, value);
      if (error) newErrors[key] = error;
    });

    if (Object.keys(newErrors).length > 0) {
      setErrors(newErrors);
      toast({
        title: "–û—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ",
        description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏",
        variant: "destructive"
      });
      return;
    }

    setLoading(true);
    setTimeout(() => {
      toast({
        title: "üéâ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!",
        description: "–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è.",
      });
      setForm({ name: "", email: "", message: "" });
      setErrors({});
      setLoading(false);
    }, 1200);
  }

  const isFormValid = form.name.trim() && form.email.trim() && form.message.trim();

  return (
    <div className="form-modern">
      <form onSubmit={handleSubmit} className="space-y-6" autoComplete="off">
        <EnhancedFormField
          id="name"
          name="name"
          type="text"
          label="–í–∞—à–µ –∏–º—è"
          placeholder="–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?"
          icon={User}
          value={form.name}
          onChange={handleChange}
          error={errors.name}
          success={form.name.length > 0 && !errors.name}
          required
          validationRules={[(value) => validateField('name', value)]}
          realTimeValidation
          autoSave
          onAutoSave={(value) => {
            // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
            localStorage.setItem('contact_form_name', value);
          }}
        />

        <EnhancedFormField
          id="email"
          name="email"
          type="email"
          label="Email –¥–ª—è —Å–≤—è–∑–∏"
          placeholder="your@email.com"
          icon={Mail}
          value={form.email}
          onChange={handleChange}
          error={errors.email}
          success={form.email.includes('@') && !errors.email}
          required
          validationRules={[(value) => validateField('email', value)]}
          realTimeValidation
          autoSave
          onAutoSave={(value) => {
            localStorage.setItem('contact_form_email', value);
          }}
        />

        <ProgressiveTextarea
          id="message"
          name="message"
          label="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –ø—Ä–æ–µ–∫—Ç–µ"
          placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç: —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –æ–±—ä–µ–º, —Å—Ä–æ–∫–∏, –æ—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è..."
          value={form.message}
          onChange={handleChange}
          error={errors.message}
          success={form.message.length >= 10 && !errors.message}
          required
          characterLimit={2000}
          showWordCount
          autoResize
          minRows={5}
          maxRows={10}
          suggestions={[
            "–ù—É–∂–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–∞–π—Ç–∞",
            "–¢—Ä–µ–±—É–µ—Ç—Å—è SEO-—Å—Ç–∞—Ç—å—è –Ω–∞ 3000 —Å–∏–º–≤–æ–ª–æ–≤",
            "–ù—É–∂–Ω—ã –ø—Ä–æ–¥–∞—é—â–∏–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤",
            "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π",
            "–ù–∞–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"
          ]}
          autoSave
          onAutoSave={(value) => {
            localStorage.setItem('contact_form_message', value);
          }}
        />

        <Button 
          type="submit" 
          size="lg" 
          disabled={loading || !isFormValid}
          className="submit-button-enhanced"
        >
          <div className="flex items-center justify-center gap-3">
            {loading ? (
              <>
                <div className="form-spinner" />
                –û—Ç–ø—Ä–∞–≤–ª—è–µ–º...
              </>
            ) : (
              <>
                <Send className="w-5 h-5 group-hover:translate-x-1 transition-transform duration-300" />
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
              </>
            )}
          </div>
        </Button>

        {/* Privacy Notice */}
        <p className="text-xs text-slate-500 text-center leading-relaxed">
          –ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å{" "}
          <a href="/privacy" className="underline hover:text-blue-600 transition-colors">
            –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
          </a>
          . –ú—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.
        </p>
      </form>
    </div>
  );
}
