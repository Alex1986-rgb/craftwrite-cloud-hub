
import { useState, useRef, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Bot, Send, User, MessageCircle, X, Minimize2, Maximize2, Calculator, FileText, Sparkles, Clock } from "lucide-react";
import { ConversationState, ConversationStep, conversationSteps, clientTypeDetection, moodDetection, ClientProfile, ProjectDetails } from "./ConversationContext";
import { AdvancedPriceCalculator, PriceCalculation } from "./PriceCalculator";
import { enhancedKnowledgeBase, getServiceRecommendations } from "./enhancedKnowledgeBase";

interface Message {
  id: string;
  text: string;
  isUser: boolean;
  timestamp: Date;
  recommendations?: string[];
  priceCalculation?: PriceCalculation;
  isThinking?: boolean;
  mood?: 'friendly' | 'professional' | 'enthusiastic' | 'empathetic';
}

interface QuickAction {
  label: string;
  message: string;
  icon: any;
}

const quickActions: QuickAction[] = [
  { label: "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å", message: "–†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞", icon: Calculator },
  { label: "–£–∑–Ω–∞—Ç—å –æ —É—Å–ª—É–≥–∞—Ö", message: "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ –æ –≤–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö", icon: FileText },
  { label: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ", message: "–ü–æ–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –≤–∞—à–∏—Ö —Ä–∞–±–æ—Ç", icon: Sparkles },
  { label: "–ü—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã", message: "–ö–∞–∫ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏?", icon: MessageCircle }
];

const HumanLikeAiAssistant = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [conversationState, setConversationState] = useState<ConversationState>({
    clientProfile: {
      type: '–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω',
      communicationStyle: '–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π'
    },
    projectDetails: {},
    gatheredInfo: {},
    context: [],
    mood: 'neutral'
  });
  
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "1",
      text: "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–∞–Ω–¥—Ä, —è –≤–µ–¥—É—â–∏–π —ç–∫—Å–ø–µ—Ä—Ç CopyPro Cloud üëã\n\n–ò –∑–Ω–∞–µ—Ç–µ —á—Ç–æ? –Ø –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ä–∞—Å—Å–∫–∞–∂—É –≤–∞–º –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö - —è –ª–∏—á–Ω–æ –ø–æ–¥–±–µ—Ä—É –∏–¥–µ–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—é —Ç–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –≤–∞—à–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π.\n\n–î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –∏ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ üòä",
      isUser: false,
      timestamp: new Date(),
      mood: 'friendly'
    },
  ]);
  
  const [inputValue, setInputValue] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const getResponseStyle = (clientType: ClientProfile['type'], mood: ConversationState['mood']) => {
    if (clientType === '–±–∏–∑–Ω–µ—Å') {
      return 'professional';
    }
    if (mood === 'excited' || mood === 'interested') {
      return 'enthusiastic';
    }
    if (mood === 'concerned') {
      return 'empathetic';
    }
    return 'friendly';
  };

  const addThinkingDelay = (complexity: 'simple' | 'medium' | 'complex' = 'medium'): number => {
    const delays = {
      simple: 800 + Math.random() * 500,
      medium: 1500 + Math.random() * 1000,
      complex: 2500 + Math.random() * 1500
    };
    return delays[complexity];
  };

  const generatePersonalizedResponse = (userMessage: string, state: ConversationState): { text: string; recommendations?: string[]; priceCalculation?: PriceCalculation; newState: ConversationState } => {
    const lowerMessage = userMessage.toLowerCase();
    const newState = { ...state };
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã
    newState.context.push(userMessage);
    if (newState.context.length > 10) {
      newState.context = newState.context.slice(-10);
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–ª–∏–µ–Ω—Ç–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
    if (newState.clientProfile.type === '–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω') {
      newState.clientProfile.type = clientTypeDetection(userMessage);
    }
    newState.mood = moodDetection(userMessage);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ä–∞—Å—á–µ—Ç—É —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    if (lowerMessage.includes('—Ä–∞—Å—Å—á–∏—Ç–∞') || lowerMessage.includes('—Å—Ç–æ–∏–º–æ—Å—Ç—å') || lowerMessage.includes('—Ü–µ–Ω–∞') || lowerMessage.includes('—Å–∫–æ–ª—å–∫–æ')) {
      return handlePriceCalculation(userMessage, newState);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
    if (newState.currentStep) {
      return handleConversationStep(userMessage, newState);
    }

    // –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π
    for (const [keywords, response] of Object.entries(enhancedKnowledgeBase)) {
      if (keywords.split(',').some(keyword => lowerMessage.includes(keyword.trim()))) {
        const personalizedResponse = personalizeResponse(response, newState);
        const recommendations = getServiceRecommendations(userMessage);
        
        return {
          text: personalizedResponse,
          recommendations: recommendations.length > 0 ? recommendations : undefined,
          newState
        };
      }
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞—á–∏–Ω–∞–µ–º –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é
    if (state.context.length === 0) {
      newState.currentStep = 'welcome';
      return {
        text: generateWelcomeResponse(userMessage, newState),
        newState
      };
    }

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    return {
      text: generateContextualResponse(userMessage, newState),
      recommendations: ["–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", "–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏", "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ"],
      newState
    };
  };

  const handlePriceCalculation = (userMessage: string, state: ConversationState): { text: string; priceCalculation?: PriceCalculation; newState: ConversationState } => {
    const newState = { ...state };
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    const projectDetails = extractProjectDetails(userMessage, state);
    newState.projectDetails = { ...newState.projectDetails, ...projectDetails };

    // –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∑–∞–¥–∞–µ–º —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    if (!projectDetails.serviceType) {
      newState.currentStep = 'service_type';
      return {
        text: "–û—Ç–ª–∏—á–Ω–æ, –¥–∞–≤–∞–π—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å! üí∞\n\n–ß—Ç–æ–±—ã –¥–∞—Ç—å —Ç–æ—á–Ω—É—é —Ü–µ–Ω—É, –º–Ω–µ –Ω—É–∂–Ω–æ –ø–æ–Ω—è—Ç—å, –∫–∞–∫–æ–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤–∞–º –Ω—É–∂–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏:",
        newState
      };
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
    const calculation = AdvancedPriceCalculator.calculateServicePrice(
      projectDetails.serviceType,
      newState.projectDetails,
      newState.clientProfile.type
    );

    newState.calculatedPrice = {
      base: calculation.basePrice,
      discounts: calculation.discounts.filter(d => d.applicable).map(d => ({ reason: d.name, amount: calculation.basePrice * d.percentage / 100 })),
      final: calculation.finalPrice,
      breakdown: calculation.components.map(c => ({ item: c.name, cost: c.basePrice }))
    };

    const responseText = generatePriceResponse(calculation, newState);

    return {
      text: responseText,
      priceCalculation: calculation,
      newState
    };
  };

  const extractProjectDetails = (message: string, state: ConversationState): Partial<ProjectDetails> => {
    const lower = message.toLowerCase();
    const details: Partial<ProjectDetails> = {};

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —É—Å–ª—É–≥–∏
    if (lower.includes('—Å—Ç–∞—Ç—å—è') || lower.includes('—Å–µ–æ') || lower.includes('seo')) {
      details.serviceType = 'SEO-—Å—Ç–∞—Ç—å—è';
    } else if (lower.includes('–ª–µ–Ω–¥–∏–Ω–≥') || lower.includes('–ø–æ—Å–∞–¥–æ—á–Ω–∞—è')) {
      details.serviceType = '–õ–µ–Ω–¥–∏–Ω–≥';
    } else if (lower.includes('—Å–æ—Ü—Å–µ—Ç–∏') || lower.includes('instagram') || lower.includes('–≤–∫–æ–Ω—Ç–∞–∫—Ç–µ')) {
      details.serviceType = '–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π';
    } else if (lower.includes('—Ç–æ–≤–∞—Ä') || lower.includes('–æ–ø–∏—Å–∞–Ω–∏–µ') || lower.includes('wildberries') || lower.includes('ozon')) {
      details.serviceType = '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤';
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—ä–µ–º–∞
    const volumeMatch = lower.match(/(\d+)\s*(—Å—Ç–∞—Ç–µ–π|—Å—Ç–∞—Ç—å–∏|—Å—Ç–∞—Ç—å—é|—à—Ç—É–∫|—à—Ç|–æ–ø–∏—Å–∞–Ω–∏–π)/);
    if (volumeMatch) {
      details.volume = parseInt(volumeMatch[1]);
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    if (lower.includes('—Å–ª–æ–∂–Ω') || lower.includes('—Ç–µ—Ö–Ω–∏—á–µ—Å–∫') || lower.includes('—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω')) {
      details.complexity = '—Å–ª–æ–∂–Ω–∞—è';
    } else if (lower.includes('–æ–±—ã—á–Ω') || lower.includes('—Å—Ç–∞–Ω–¥–∞—Ä—Ç')) {
      details.complexity = '—Å—Ä–µ–¥–Ω—è—è';
    } else if (lower.includes('–ø—Ä–æ—Å—Ç') || lower.includes('–±–∞–∑–æ–≤')) {
      details.complexity = '–ø—Ä–æ—Å—Ç–∞—è';
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
    if (lower.includes('—Å—Ä–æ—á–Ω–æ') || lower.includes('–±—ã—Å—Ç—Ä–æ') || lower.includes('–∑–∞–≤—Ç—Ä–∞') || lower.includes('—Å–µ–≥–æ–¥–Ω—è')) {
      details.deadline = lower.includes('—Å–µ–≥–æ–¥–Ω—è') ? '—Å–µ–≥–æ–¥–Ω—è' : lower.includes('–∑–∞–≤—Ç—Ä–∞') ? '–∑–∞–≤—Ç—Ä–∞' : '—Å—Ä–æ—á–Ω–æ';
    }

    return details;
  };

  const generatePriceResponse = (calculation: PriceCalculation, state: ConversationState): string => {
    let response = "";

    // –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
    if (state.clientProfile.type === '–Ω–æ–≤–∏—á–æ–∫') {
      response += "–û—Ç–ª–∏—á–Ω–æ! –í–∏–∂—É, —á—Ç–æ –≤—ã –¥–µ–ª–∞–µ—Ç–µ –ø–µ—Ä–≤—ã–µ —à–∞–≥–∏ –≤ –∫–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥–µ. –Ø —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞–ª –¥–ª—è –≤–∞—Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç üòä\n\n";
    } else if (state.clientProfile.type === '–±–∏–∑–Ω–µ—Å') {
      response += "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –î–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —è –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ üíº\n\n";
    } else if (state.clientProfile.type === '–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π') {
      response += "–ö–∞–∫ –ø—Ä–∏—è—Ç–Ω–æ —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –≤–∞–º–∏! –ö–æ–Ω–µ—á–Ω–æ, –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —É –º–µ–Ω—è –µ—Å—Ç—å –æ—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è ü§ù\n\n";
    } else {
      response += "–†–∞—Å—Å—á–∏—Ç–∞–ª —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞! üí∞\n\n";
    }

    response += calculation.breakdown + "\n\n";
    response += calculation.timeline + "\n\n";

    if (calculation.recommendations.length > 0) {
      response += "üéØ –ú–æ–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n";
      calculation.recommendations.forEach(rec => {
        response += `${rec}\n`;
      });
      response += "\n";
    }

    // –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–ª–∏–µ–Ω—Ç–∞
    if (state.mood === 'concerned') {
      response += "–ü–æ–Ω–∏–º–∞—é –≤–∞—à–∏ –æ–ø–∞—Å–µ–Ω–∏—è –ø–æ —Ü–µ–Ω–µ. –î–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º, –∫–∞–∫ –º–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –ø–æ–¥ –≤–∞—à –±—é–¥–∂–µ—Ç? ü§î";
    } else if (state.mood === 'impatient') {
      response += "–ì–æ—Ç–æ–≤ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ! –•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑? ‚ö°";
    } else {
      response += "–ß—Ç–æ —Å–∫–∞–∂–µ—Ç–µ? –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º? –ò–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞—Å—á–µ—Ç—É? üòä";
    }

    return response;
  };

  const personalizeResponse = (baseResponse: string, state: ConversationState): string => {
    let response = baseResponse;

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–ª–∏–µ–Ω—Ç–∞
    if (state.clientProfile.type === '–Ω–æ–≤–∏—á–æ–∫' && !response.includes('–Ω–æ–≤–∏—á–æ–∫')) {
      response += "\n\nüí° –ö—Å—Ç–∞—Ç–∏, –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —É –Ω–∞—Å —Å–∫–∏–¥–∫–∞ 10% –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑!";
    } else if (state.clientProfile.type === '–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π') {
      response += "\n\nüéâ –ö–∞–∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é –≤–∞–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏!";
    } else if (state.clientProfile.type === '–±–∏–∑–Ω–µ—Å') {
      response += "\n\nüíº –î–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —É –Ω–∞—Å –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä.";
    }

    return response;
  };

  const generateWelcomeResponse = (userMessage: string, state: ConversationState): string => {
    const clientType = state.clientProfile.type;
    
    if (clientType === '–Ω–æ–≤–∏—á–æ–∫') {
      return "–ü–æ–Ω—è–ª, –≤—ã —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥–æ–º! üå±\n\n–≠—Ç–æ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ - —è –æ—á–µ–Ω—å –ª—é–±–ª—é —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–æ–≤—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ –ø–æ–º–æ–≥–∞—Ç—å –∏–º –¥–æ—Å—Ç–∏—á—å –ø–µ—Ä–≤—ã—Ö —É—Å–ø–µ—Ö–æ–≤. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∞—è —Ü–µ–ª—å —É –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞? –•–æ—Ç–∏—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏, –ø—Ä–∏–≤–ª–µ—á—å —Ç—Ä–∞—Ñ–∏–∫ –∏–ª–∏ —á—Ç–æ-—Ç–æ –µ—â–µ?";
    } else if (clientType === '–±–∏–∑–Ω–µ—Å') {
      return "–û—Ç–ª–∏—á–Ω–æ! –í–∏–∂—É, —á—Ç–æ –º—ã –∏–º–µ–µ–º –¥–µ–ª–æ —Å —Å–µ—Ä—å–µ–∑–Ω—ã–º –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–µ–∫—Ç–æ–º üíº\n\n–î–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —É –º–µ–Ω—è –æ—Å–æ–±—ã–π –ø–æ–¥—Ö–æ–¥ - –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑, –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∏ —Ü–µ–ª—è—Ö –ø—Ä–æ–µ–∫—Ç–∞.";
    } else if (clientType === '–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π') {
      return "–ö–∞–∫ –ø—Ä–∏—è—Ç–Ω–æ —Å–Ω–æ–≤–∞ —Å –≤–∞–º–∏ —Ä–∞–±–æ—Ç–∞—Ç—å! ü§ù\n\n–í—ã —É–∂–µ –∑–Ω–∞–µ—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥, –ø–æ—ç—Ç–æ–º—É –¥–∞–≤–∞–π—Ç–µ —Å—Ä–∞–∑—É –ø–µ—Ä–µ–π–¥–µ–º –∫ –≤–∞—à–µ–º—É –Ω–æ–≤–æ–º—É –ø—Ä–æ–µ–∫—Ç—É. –ß—Ç–æ –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑ –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å?";
    } else {
      return "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å! üòä\n\n–ß—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ:\n‚Ä¢ –ö–∞–∫–∞—è —É –≤–∞—Å —Å—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏?\n‚Ä¢ –ö–∞–∫–∏–µ —Ü–µ–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏—á—å?\n‚Ä¢ –ï—Å—Ç—å –ª–∏ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä–∞–º–∏?";
    }
  };

  const generateContextualResponse = (userMessage: string, state: ConversationState): string => {
    const hasContext = state.context.length > 1;
    
    if (hasContext) {
      return `–û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –Ω–∞—à–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä–µ, –≤–∏–∂—É —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç. \n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Å–≤—è–∑–∞—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é:\n\nüìû +7 (925) 733-86-48\nüìß optteem@mail.ru\nüí¨ Telegram @Koopeerayter\n\n–û—Ç–≤–µ—á—É –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç –∏ –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ! üòä`;
    }

    return "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:\n\nüìû +7 (925) 733-86-48\nüìß optteem@mail.ru\nüí¨ Telegram @Koopeerayter\n\n–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é! üöÄ";
  };

  const handleConversationStep = (userMessage: string, state: ConversationState): { text: string; recommendations?: string[]; newState: ConversationState } => {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
    const newState = { ...state };
    // –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à–∞–≥–æ–≤ –¥–∏–∞–ª–æ–≥–∞ –±—É–¥–µ—Ç –∑–¥–µ—Å—å
    return {
      text: "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∏–∞–ª–æ–≥...",
      newState
    };
  };

  const handleSendMessage = async (messageText?: string) => {
    const textToSend = messageText || inputValue;
    if (!textToSend.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      text: textToSend,
      isUser: true,
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue("");
    setIsTyping(true);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–¥—É–º–∞–µ—Ç"
    const thinkingMessage: Message = {
      id: (Date.now() + 0.5).toString(),
      text: "–¥—É–º–∞—é...",
      isUser: false,
      timestamp: new Date(),
      isThinking: true
    };

    setMessages(prev => [...prev, thinkingMessage]);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
    const isComplexQuery = textToSend.toLowerCase().includes('—Ä–∞—Å—Å—á–∏—Ç–∞') || 
                          textToSend.toLowerCase().includes('—Å—Ç–æ–∏–º–æ—Å—Ç—å') ||
                          textToSend.split(' ').length > 10;
    
    const delay = addThinkingDelay(isComplexQuery ? 'complex' : 'medium');

    setTimeout(() => {
      const { text, recommendations, priceCalculation, newState } = generatePersonalizedResponse(textToSend, conversationState);
      
      setConversationState(newState);
      
      // –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–¥—É–º–∞—é"
      setMessages(prev => prev.filter(msg => !msg.isThinking));

      const aiResponse: Message = {
        id: (Date.now() + 1).toString(),
        text,
        isUser: false,
        timestamp: new Date(),
        recommendations,
        priceCalculation,
        mood: getResponseStyle(newState.clientProfile.type, newState.mood) as any
      };

      setMessages(prev => [...prev, aiResponse]);
      setIsTyping(false);
    }, delay);
  };

  const handleQuickAction = (action: QuickAction) => {
    handleSendMessage(action.message);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  if (!isOpen) {
    return (
      <div className="fixed bottom-6 left-6 z-50">
        <Button
          onClick={() => setIsOpen(true)}
          className="w-16 h-16 rounded-full bg-gradient-to-r from-purple-500 to-blue-600 hover:from-purple-400 hover:to-blue-500 shadow-xl hover:shadow-2xl transition-all duration-300 hover:scale-110 group"
        >
          <div className="relative">
            <Bot className="w-7 h-7 text-white group-hover:scale-110 transition-transform" />
            <div className="absolute -top-1 -right-1 w-4 h-4 bg-green-500 rounded-full animate-pulse"></div>
          </div>
        </Button>
      </div>
    );
  }

  return (
    <div className="fixed bottom-6 left-6 z-50">
      <div className={`bg-white rounded-3xl shadow-2xl border border-slate-200 transition-all duration-300 ${
        isMinimized ? 'w-80 h-16' : 'w-96 h-[700px]'
      }`}>
        {/* Header */}
        <div className="flex items-center justify-between p-4 border-b border-slate-200 bg-gradient-to-r from-purple-500 to-blue-600 rounded-t-3xl">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 bg-white/20 rounded-xl flex items-center justify-center">
              <Bot className="w-6 h-6 text-white" />
            </div>
            <div>
              <h3 className="text-white font-bold">–ê–ª–µ–∫—Å–∞–Ω–¥—Ä AI</h3>
              <p className="text-white/80 text-sm flex items-center gap-1">
                <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                –í–µ–¥—É—â–∏–π —ç–∫—Å–ø–µ—Ä—Ç
              </p>
            </div>
          </div>
          <div className="flex items-center gap-2">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setIsMinimized(!isMinimized)}
              className="text-white hover:bg-white/20 rounded-xl"
            >
              {isMinimized ? <Maximize2 className="w-4 h-4" /> : <Minimize2 className="w-4 h-4" />}
            </Button>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setIsOpen(false)}
              className="text-white hover:bg-white/20 rounded-xl"
            >
              <X className="w-4 h-4" />
            </Button>
          </div>
        </div>

        {!isMinimized && (
          <>
            {/* Quick Actions */}
            <div className="p-3 border-b border-slate-100 bg-slate-50">
              <div className="grid grid-cols-2 gap-2">
                {quickActions.map((action) => (
                  <Button
                    key={action.label}
                    onClick={() => handleQuickAction(action)}
                    variant="outline"
                    size="sm"
                    className="text-xs h-8 bg-white hover:bg-blue-50 border-slate-200"
                  >
                    <action.icon className="w-3 h-3 mr-1" />
                    {action.label}
                  </Button>
                ))}
              </div>
            </div>

            {/* Messages */}
            <div className="flex-1 p-4 overflow-y-auto h-[490px] space-y-4">
              {messages.map((message) => (
                <div key={message.id} className="space-y-2">
                  <div className={`flex ${message.isUser ? 'justify-end' : 'justify-start'}`}>
                    <div className={`flex items-start gap-3 max-w-[85%] ${message.isUser ? 'flex-row-reverse' : ''}`}>
                      <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                        message.isUser 
                          ? 'bg-blue-500' 
                          : message.isThinking
                          ? 'bg-orange-500'
                          : 'bg-gradient-to-r from-purple-500 to-blue-600'
                      }`}>
                        {message.isUser ? (
                          <User className="w-4 h-4 text-white" />
                        ) : message.isThinking ? (
                          <Clock className="w-4 h-4 text-white animate-spin" />
                        ) : (
                          <Bot className="w-4 h-4 text-white" />
                        )}
                      </div>
                      <div className={`rounded-2xl p-3 ${
                        message.isUser
                          ? 'bg-blue-500 text-white'
                          : message.isThinking
                          ? 'bg-orange-100 text-orange-800'
                          : 'bg-slate-100 text-slate-800'
                      }`}>
                        <p className="text-sm leading-relaxed whitespace-pre-line">{message.text}</p>
                        {!message.isThinking && (
                          <p className={`text-xs mt-1 ${
                            message.isUser ? 'text-blue-100' : 'text-slate-500'
                          }`}>
                            {message.timestamp.toLocaleTimeString()}
                          </p>
                        )}
                      </div>
                    </div>
                  </div>
                  
                  {/* Price Calculation Display */}
                  {message.priceCalculation && !message.isUser && (
                    <div className="ml-11 p-3 bg-green-50 border border-green-200 rounded-xl">
                      <h4 className="font-semibold text-green-800 mb-2">üí∞ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏</h4>
                      <div className="text-sm text-green-700 space-y-1">
                        <p><strong>–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞:</strong> {message.priceCalculation.basePrice}‚ÇΩ</p>
                        <p><strong>–ò—Ç–æ–≥–æ:</strong> {message.priceCalculation.finalPrice}‚ÇΩ</p>
                        <p className="text-xs">{message.priceCalculation.timeline}</p>
                      </div>
                    </div>
                  )}
                  
                  {/* Recommendations */}
                  {message.recommendations && !message.isUser && (
                    <div className="ml-11 space-y-1">
                      <p className="text-xs text-slate-600 font-medium">–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —É—Å–ª—É–≥–∏:</p>
                      <div className="flex flex-wrap gap-1">
                        {message.recommendations.map((rec, index) => (
                          <Button
                            key={index}
                            onClick={() => handleSendMessage(`–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ ${rec}`)}
                            variant="outline"
                            size="sm"
                            className="text-xs h-6 px-2 bg-blue-50 hover:bg-blue-100 border-blue-200 text-blue-700"
                          >
                            {rec}
                          </Button>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              ))}
              <div ref={messagesEndRef} />
            </div>

            {/* Input */}
            <div className="p-4 border-t border-slate-200 bg-slate-50 rounded-b-3xl">
              <div className="flex items-center gap-3">
                <Input
                  value={inputValue}
                  onChange={(e) => setInputValue(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å..."
                  className="flex-1 rounded-xl border-slate-300 focus:border-blue-500"
                  disabled={isTyping}
                />
                <Button
                  onClick={() => handleSendMessage()}
                  disabled={!inputValue.trim() || isTyping}
                  className="rounded-xl bg-gradient-to-r from-purple-500 to-blue-600 hover:from-purple-400 hover:to-blue-500"
                >
                  <Send className="w-4 h-4" />
                </Button>
              </div>
            </div>
          </>
        )}
      </div>
    </div>
  );
};

export default HumanLikeAiAssistant;
