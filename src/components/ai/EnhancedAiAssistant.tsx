
import { useState, useRef, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Bot, Send, User, MessageCircle, X, Minimize2, Maximize2, Calculator, FileText, Sparkles } from "lucide-react";
import { enhancedKnowledgeBase, getServiceRecommendations, calculateEstimate } from "./enhancedKnowledgeBase";

interface Message {
  id: string;
  text: string;
  isUser: boolean;
  timestamp: Date;
  recommendations?: string[];
  hasCalculator?: boolean;
}

interface QuickAction {
  label: string;
  message: string;
  icon: any;
}

const quickActions: QuickAction[] = [
  { label: "–£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã", message: "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö –∏ —Ü–µ–Ω–∞—Ö", icon: FileText },
  { label: "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ", message: "–ü–æ–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –≤–∞—à–∏—Ö —Ä–∞–±–æ—Ç –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", icon: Sparkles },
  { label: "–ü—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã", message: "–ö–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–∫–∞–∑–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç?", icon: MessageCircle },
  { label: "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", message: "–†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞", icon: Calculator }
];

const EnhancedAiAssistant = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "1",
      text: "–ü—Ä–∏–≤–µ—Ç! –Ø –ê–ª–µ–∫—Å–∞–Ω–¥—Ä, –≤–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫ CopyPro Cloud. –Ø –∑–Ω–∞—é –≤—Å–µ –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö, —Ü–µ–Ω–∞—Ö, –∫–µ–π—Å–∞—Ö –∏ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö. –ú–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –∏ –¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –ß–µ–º –ø–æ–º–æ—á—å?",
      isUser: false,
      timestamp: new Date(),
    },
  ]);
  const [inputValue, setInputValue] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const generateEnhancedResponse = (userMessage: string): { text: string; recommendations?: string[] } => {
    const lowerMessage = userMessage.toLowerCase();
    
    // –ü–æ–∏—Å–∫ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
    for (const [keywords, response] of Object.entries(enhancedKnowledgeBase)) {
      if (keywords.split(',').some(keyword => lowerMessage.includes(keyword.trim()))) {
        const recommendations = getServiceRecommendations(userMessage);
        return { 
          text: response, 
          recommendations: recommendations.length > 0 ? recommendations : undefined 
        };
      }
    }

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    if (lowerMessage.includes('—Ä–∞—Å—Å—á–∏—Ç–∞') || lowerMessage.includes('—Å—Ç–æ–∏–º–æ—Å—Ç—å') || lowerMessage.includes('–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä')) {
      return {
        text: "–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–Ω–µ –Ω—É–∂–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ:\n\n1. –¢–∏–ø —É—Å–ª—É–≥–∏ (SEO-—Å—Ç–∞—Ç—å—è, –ª–µ–Ω–¥–∏–Ω–≥, –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π –∏ —Ç.–¥.)\n2. –û–±—ä–µ–º —Ä–∞–±–æ—Ç—ã\n3. –°—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n4. –û—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è\n\n–û–ø–∏—à–∏—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç, –∏ —è —Ä–∞—Å—Å—á–∏—Ç–∞—é –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å!",
        recommendations: ["SEO-—Å—Ç–∞—Ç—å–∏", "–ü—Ä–æ–¥–∞—é—â–∏–µ —Ç–µ–∫—Å—Ç—ã", "–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π"]
      };
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —É—Å–ª—É–≥–∏
    const serviceTypes = ["seo", "—Å—Ç–∞—Ç—å—è", "–ª–µ–Ω–¥–∏–Ω–≥", "email", "—Å–æ—Ü—Å–µ—Ç–∏", "–æ–ø–∏—Å–∞–Ω–∏–µ", "—Ç–æ–≤–∞—Ä"];
    const foundService = serviceTypes.find(type => lowerMessage.includes(type));
    
    if (foundService) {
      const estimate = calculateEstimate(foundService, userMessage);
      return {
        text: estimate + "\n\n–•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∏–ª–∏ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è?",
        recommendations: getServiceRecommendations(userMessage)
      };
    }

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
    return {
      text: "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:\n\nüìû +7 (925) 733-86-48\nüìß optteem@mail.ru\nüí¨ Telegram @Koopeerayter\n\n–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É –ø—Ä–æ–µ–∫—Ç—É!",
      recommendations: ["–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", "–ó–∞–∫–∞–∑ —É—Å–ª—É–≥–∏", "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ"]
    };
  };

  const handleSendMessage = async (messageText?: string) => {
    const textToSend = messageText || inputValue;
    if (!textToSend.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      text: textToSend,
      isUser: true,
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue("");
    setIsTyping(true);

    setTimeout(() => {
      const { text, recommendations } = generateEnhancedResponse(textToSend);
      
      const aiResponse: Message = {
        id: (Date.now() + 1).toString(),
        text,
        isUser: false,
        timestamp: new Date(),
        recommendations,
      };

      setMessages(prev => [...prev, aiResponse]);
      setIsTyping(false);
    }, 1000 + Math.random() * 1000);
  };

  const handleQuickAction = (action: QuickAction) => {
    handleSendMessage(action.message);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  if (!isOpen) {
    return (
      <div className="fixed bottom-6 left-6 z-50">
        <Button
          onClick={() => setIsOpen(true)}
          className="w-16 h-16 rounded-full bg-gradient-to-r from-purple-500 to-blue-600 hover:from-purple-400 hover:to-blue-500 shadow-xl hover:shadow-2xl transition-all duration-300 hover:scale-110 group"
        >
          <div className="relative">
            <Bot className="w-7 h-7 text-white group-hover:scale-110 transition-transform" />
            <div className="absolute -top-1 -right-1 w-4 h-4 bg-green-500 rounded-full animate-pulse"></div>
          </div>
        </Button>
      </div>
    );
  }

  return (
    <div className="fixed bottom-6 left-6 z-50">
      <div className={`bg-white rounded-3xl shadow-2xl border border-slate-200 transition-all duration-300 ${
        isMinimized ? 'w-80 h-16' : 'w-96 h-[650px]'
      }`}>
        {/* Header */}
        <div className="flex items-center justify-between p-4 border-b border-slate-200 bg-gradient-to-r from-purple-500 to-blue-600 rounded-t-3xl">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 bg-white/20 rounded-xl flex items-center justify-center">
              <Bot className="w-6 h-6 text-white" />
            </div>
            <div>
              <h3 className="text-white font-bold">–ê–ª–µ–∫—Å–∞–Ω–¥—Ä AI</h3>
              <p className="text-white/80 text-sm flex items-center gap-1">
                <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                –≠–∫—Å–ø–µ—Ä—Ç CopyPro
              </p>
            </div>
          </div>
          <div className="flex items-center gap-2">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setIsMinimized(!isMinimized)}
              className="text-white hover:bg-white/20 rounded-xl"
            >
              {isMinimized ? <Maximize2 className="w-4 h-4" /> : <Minimize2 className="w-4 h-4" />}
            </Button>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setIsOpen(false)}
              className="text-white hover:bg-white/20 rounded-xl"
            >
              <X className="w-4 h-4" />
            </Button>
          </div>
        </div>

        {!isMinimized && (
          <>
            {/* Quick Actions */}
            <div className="p-3 border-b border-slate-100 bg-slate-50">
              <div className="grid grid-cols-2 gap-2">
                {quickActions.map((action) => (
                  <Button
                    key={action.label}
                    onClick={() => handleQuickAction(action)}
                    variant="outline"
                    size="sm"
                    className="text-xs h-8 bg-white hover:bg-blue-50 border-slate-200"
                  >
                    <action.icon className="w-3 h-3 mr-1" />
                    {action.label}
                  </Button>
                ))}
              </div>
            </div>

            {/* Messages */}
            <div className="flex-1 p-4 overflow-y-auto h-[440px] space-y-4">
              {messages.map((message) => (
                <div key={message.id} className="space-y-2">
                  <div className={`flex ${message.isUser ? 'justify-end' : 'justify-start'}`}>
                    <div className={`flex items-start gap-3 max-w-[85%] ${message.isUser ? 'flex-row-reverse' : ''}`}>
                      <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                        message.isUser 
                          ? 'bg-blue-500' 
                          : 'bg-gradient-to-r from-purple-500 to-blue-600'
                      }`}>
                        {message.isUser ? (
                          <User className="w-4 h-4 text-white" />
                        ) : (
                          <Bot className="w-4 h-4 text-white" />
                        )}
                      </div>
                      <div className={`rounded-2xl p-3 ${
                        message.isUser
                          ? 'bg-blue-500 text-white'
                          : 'bg-slate-100 text-slate-800'
                      }`}>
                        <p className="text-sm leading-relaxed whitespace-pre-line">{message.text}</p>
                        <p className={`text-xs mt-1 ${
                          message.isUser ? 'text-blue-100' : 'text-slate-500'
                        }`}>
                          {message.timestamp.toLocaleTimeString()}
                        </p>
                      </div>
                    </div>
                  </div>
                  
                  {/* Recommendations */}
                  {message.recommendations && !message.isUser && (
                    <div className="ml-11 space-y-1">
                      <p className="text-xs text-slate-600 font-medium">–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —É—Å–ª—É–≥–∏:</p>
                      <div className="flex flex-wrap gap-1">
                        {message.recommendations.map((rec, index) => (
                          <Button
                            key={index}
                            onClick={() => handleSendMessage(`–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ ${rec}`)}
                            variant="outline"
                            size="sm"
                            className="text-xs h-6 px-2 bg-blue-50 hover:bg-blue-100 border-blue-200 text-blue-700"
                          >
                            {rec}
                          </Button>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              ))}
              
              {isTyping && (
                <div className="flex justify-start">
                  <div className="flex items-start gap-3">
                    <div className="w-8 h-8 rounded-full bg-gradient-to-r from-purple-500 to-blue-600 flex items-center justify-center">
                      <Bot className="w-4 h-4 text-white" />
                    </div>
                    <div className="bg-slate-100 rounded-2xl p-3">
                      <div className="flex gap-1">
                        <div className="w-2 h-2 bg-slate-400 rounded-full animate-bounce"></div>
                        <div className="w-2 h-2 bg-slate-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                        <div className="w-2 h-2 bg-slate-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                      </div>
                    </div>
                  </div>
                </div>
              )}
              <div ref={messagesEndRef} />
            </div>

            {/* Input */}
            <div className="p-4 border-t border-slate-200 bg-slate-50 rounded-b-3xl">
              <div className="flex items-center gap-3">
                <Input
                  value={inputValue}
                  onChange={(e) => setInputValue(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder="–°–ø—Ä–æ—Å–∏—Ç–µ –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö, —Ü–µ–Ω–∞—Ö, –∫–µ–π—Å–∞—Ö..."
                  className="flex-1 rounded-xl border-slate-300 focus:border-blue-500"
                  disabled={isTyping}
                />
                <Button
                  onClick={() => handleSendMessage()}
                  disabled={!inputValue.trim() || isTyping}
                  className="rounded-xl bg-gradient-to-r from-purple-500 to-blue-600 hover:from-purple-400 hover:to-blue-500"
                >
                  <Send className="w-4 h-4" />
                </Button>
              </div>
            </div>
          </>
        )}
      </div>
    </div>
  );
};

export default EnhancedAiAssistant;
