
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useOrderSystem } from '@/hooks/useOrderSystem';
import { useSystemSettings } from '@/hooks/useSystemSettings';
import { useEnhancedAnalytics } from '@/hooks/useEnhancedAnalytics';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { CheckCircle, AlertCircle, Loader2, Info, TestTube, Monitor, Sparkles, Activity, Settings, Zap } from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { EnhancedFormField } from '@/components/ui/enhanced-form-field';
import { ProgressiveTextarea } from '@/components/ui/progressive-textarea';
import { ModernSelect } from '@/components/ui/modern-select';
import { toast } from '@/hooks/use-toast';
import EnhancedSystemMonitor from '@/components/admin/EnhancedSystemMonitor';
import ProductionLaunchManager from '@/components/admin/ProductionLaunchManager';

export default function OrderSystemTest() {
  const { createOrder, loading, error } = useOrderSystem();
  const { settings, loading: settingsLoading, refreshSettings } = useSystemSettings();
  const { trackEvent, analyticsEnabled, googleAnalyticsId, yandexMetricaId } = useEnhancedAnalytics();
  
  const [success, setSuccess] = useState(false);
  const [orderId, setOrderId] = useState('');
  const [testResults, setTestResults] = useState<Record<string, boolean>>({});
  const [analyticsEvents, setAnalyticsEvents] = useState<string[]>([]);

  const [formData, setFormData] = useState({
    service_name: 'SEO-—Å—Ç–∞—Ç—å—è',
    service_slug: 'seo-article',
    details: '–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç–∞—Ç—å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∑–∞–∫–∞–∑–æ–≤',
    contact_name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    contact_email: 'test@example.com',
    contact_phone: '+7 900 123-45-67',
    estimated_price: 5000,
    additional_requirements: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É –∑–∞–∫–∞–∑—É'
  });

  const [errors, setErrors] = useState<{ [key: string]: string }>({});

  const serviceOptions = [
    { value: 'seo-article', label: 'SEO-—Å—Ç–∞—Ç—å—è', description: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º' },
    { value: 'landing-page', label: '–õ–µ–Ω–¥–∏–Ω–≥', description: '–ü—Ä–æ–¥–∞—é—â–∞—è –ø–æ—Å–∞–¥–æ—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞' },
    { value: 'telegram-content', label: '–¢–µ–ª–µ–≥—Ä–∞–º –∫–æ–Ω—Ç–µ–Ω—Ç', description: '–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è Telegram –∫–∞–Ω–∞–ª–∞' },
    { value: 'email-campaign', label: 'Email –∫–∞–º–ø–∞–Ω–∏—è', description: '–°–µ—Ä–∏—è –ø–∏—Å–µ–º –¥–ª—è email –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞' },
    { value: 'chatbot-scripts', label: '–ß–∞—Ç-–±–æ—Ç —Å–∫—Ä–∏–ø—Ç—ã', description: '–î–∏–∞–ª–æ–≥–∏ –¥–ª—è —á–∞—Ç-–±–æ—Ç–∞' }
  ];

  // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º console.log –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
  useEffect(() => {
    const originalConsoleLog = console.log;
    console.log = (...args) => {
      if (args[0] === 'Event tracked:' || args[0] === 'Conversion tracked:') {
        setAnalyticsEvents(prev => [...prev, JSON.stringify(args[1], null, 2)]);
      }
      originalConsoleLog.apply(console, args);
    };

    return () => {
      console.log = originalConsoleLog;
    };
  }, []);

  const runSystemTests = async () => {
    const results: Record<string, boolean> = {};
    
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    results.systemSettings = Object.keys(settings).length > 0;
    
    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞
    const minOrderAmount = settings.min_order_amount || 1000;
    results.minOrderValidation = minOrderAmount > 0;
    
    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    results.analyticsEnabled = analyticsEnabled;
    
    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã
    results.formValidation = formData.contact_email.includes('@') && formData.contact_name.length > 0;
    
    setTestResults(results);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ
    trackEvent({
      action: 'system_test_completed',
      category: 'Testing',
      label: 'Order System Test',
      custom_parameters: {
        test_results: results,
        timestamp: new Date().toISOString()
      }
    });
  };

  const validateForm = () => {
    const newErrors: { [key: string]: string } = {};
    
    if (!formData.contact_email.trim()) {
      newErrors.contact_email = 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.contact_email)) {
      newErrors.contact_email = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email';
    }
    
    if (!formData.contact_name.trim()) {
      newErrors.contact_name = '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      toast({
        title: "–û—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ",
        description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏",
        variant: "destructive"
      });
      return;
    }
    
    setSuccess(false);
    setOrderId('');
    setAnalyticsEvents([]);

    try {
      const order = await createOrder(formData);
      setSuccess(true);
      setOrderId(order.id);
      
      toast({
        title: "üéâ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!",
        description: `–ó–∞–∫–∞–∑ #${order.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è`,
      });
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
      setTimeout(runSystemTests, 1000);
      
    } catch (err) {
      console.error('Order creation failed:', err);
      toast({
        title: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã.",
        variant: "destructive"
      });
    }
  };

  const handleInputChange = (field: string, value: string | number) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  if (settingsLoading) {
    return (
      <div className="flex items-center justify-center p-8">
        <Loader2 className="w-6 h-6 animate-spin mr-2" />
        –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...
      </div>
    );
  }

  return (
    <div className="max-w-6xl mx-auto p-6 space-y-8">
      {/* Modern Header with Enhanced Animation */}
      <div className="text-center space-y-4 animate-fade-in">
        <div className="inline-flex items-center gap-3 bg-gradient-to-r from-primary/10 via-accent/10 to-primary/10 rounded-full px-6 py-3 border border-primary/20 backdrop-blur-sm">
          <Sparkles className="w-5 h-5 text-primary animate-pulse" />
          <span className="text-primary font-semibold text-sm tracking-wide">–°–∏—Å—Ç–µ–º–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞</span>
          <div className="w-2 h-2 bg-primary/50 rounded-full animate-pulse" style={{ animationDelay: '0.5s' }}></div>
        </div>
        
        <h2 className="text-3xl md:text-4xl font-bold bg-gradient-to-r from-primary via-accent to-primary bg-clip-text text-transparent">
          –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã
        </h2>
        <p className="text-lg text-muted-foreground max-w-2xl mx-auto leading-relaxed">
          –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ç–µ—Å—Ç–∞–º–∏
        </p>
        
        {/* Status Indicators */}
        <div className="flex justify-center gap-6 text-sm text-muted-foreground pt-4">
          <div className="flex items-center gap-2">
            <div className="w-2 h-2 bg-success rounded-full animate-pulse"></div>
            <span>–°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞</span>
          </div>
          <div className="flex items-center gap-2">
            <div className="w-2 h-2 bg-primary rounded-full animate-pulse" style={{ animationDelay: '0.3s' }}></div>
            <span>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω</span>
          </div>
          <div className="flex items-center gap-2">
            <div className="w-2 h-2 bg-accent rounded-full animate-pulse" style={{ animationDelay: '0.6s' }}></div>
            <span>–¢–µ—Å—Ç—ã –≥–æ—Ç–æ–≤—ã</span>
          </div>
        </div>
      </div>

      <Tabs defaultValue="diagnostics" className="w-full">
        <TabsList className="grid w-full grid-cols-3 h-14 bg-gradient-to-r from-muted/50 to-muted/30 backdrop-blur-sm border border-border/50">
          <TabsTrigger value="diagnostics" className="flex items-center gap-2 text-sm font-medium data-[state=active]:bg-primary/10 data-[state=active]:text-primary">
            <Activity className="w-4 h-4" />
            –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
          </TabsTrigger>
          <TabsTrigger value="production" className="flex items-center gap-2 text-sm font-medium data-[state=active]:bg-primary/10 data-[state=active]:text-primary">
            <Settings className="w-4 h-4" />
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–æ–º
          </TabsTrigger>
          <TabsTrigger value="legacy" className="flex items-center gap-2 text-sm font-medium data-[state=active]:bg-primary/10 data-[state=active]:text-primary">
            <TestTube className="w-4 h-4" />
            –ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
          </TabsTrigger>
        </TabsList>

        <TabsContent value="diagnostics" className="space-y-6">
          <EnhancedSystemMonitor />
        </TabsContent>

        <TabsContent value="production" className="space-y-6">
          <ProductionLaunchManager />
        </TabsContent>

        <TabsContent value="legacy" className="space-y-6">
          <Card className="form-modern border-primary/20 bg-gradient-to-br from-background/95 to-muted/30 backdrop-blur-sm">
            <CardHeader className="bg-gradient-to-r from-primary/5 to-accent/5 border-b border-primary/10">
              <CardTitle className="flex items-center gap-3 text-xl">
                <div className="p-2 bg-primary/10 rounded-lg">
                  <TestTube className="w-5 h-5 text-primary" />
                </div>
                –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∑–∞–∫–∞–∑–æ–≤
                <Badge variant="secondary" className="ml-auto">
                  <Zap className="w-3 h-3 mr-1" />
                  –ú–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
                </Badge>
              </CardTitle>
            </CardHeader>
            <CardContent className="p-8">
          <div className="grid lg:grid-cols-3 gap-6">
            {/* –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
            <Card className="form-modern">
              <CardHeader className="bg-gradient-to-r from-info/5 to-info/10 border-b border-info/20">
                <CardTitle className="text-lg flex items-center gap-3">
                  <div className="p-2 bg-info/10 rounded-lg">
                    <Info className="w-4 h-4 text-info" />
                  </div>
                  –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4 p-6">
                <div className="text-sm">
                  <strong>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞:</strong> 
                  <div className="mt-1 p-2 bg-gray-100 rounded text-xs">
                    {settings.site_title || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}
                  </div>
                </div>
                <div className="text-sm">
                  <strong>–í–∞–ª—é—Ç–∞:</strong> 
                  <Badge variant="secondary">{settings.default_currency || 'RUB'}</Badge>
                </div>
                <div className="text-sm">
                  <strong>–ú–∏–Ω. —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</strong> 
                  <Badge variant={settings.min_order_amount ? 'default' : 'destructive'}>
                    {settings.min_order_amount ? `${settings.min_order_amount / 100} —Ä—É–±.` : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}
                  </Badge>
                </div>
                <div className="text-sm">
                  <strong>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞:</strong> 
                  <Badge variant={settings.analytics_enabled ? 'default' : 'secondary'}>
                    {settings.analytics_enabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω–∞' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}
                  </Badge>
                </div>
                <div className="text-sm">
                  <strong>Google Analytics:</strong> 
                  <div className="mt-1 p-2 bg-gray-100 rounded text-xs break-all">
                    {googleAnalyticsId || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
                  </div>
                </div>
                <div className="text-sm">
                  <strong>–Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∞:</strong> 
                  <div className="mt-1 p-2 bg-gray-100 rounded text-xs">
                    {yandexMetricaId || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
                  </div>
                </div>
                
                <Button 
                  onClick={refreshSettings} 
                  variant="outline" 
                  size="sm"
                  className="w-full"
                >
                  –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                </Button>
              </CardContent>
            </Card>

            {/* –§–æ—Ä–º–∞ –∑–∞–∫–∞–∑–∞ */}
            <Card className="form-modern">
              <CardHeader className="bg-gradient-to-r from-primary/5 to-accent/5 border-b border-primary/20">
                <CardTitle className="text-lg flex items-center gap-3">
                  <div className="p-2 bg-primary/10 rounded-lg">
                    <TestTube className="w-4 h-4 text-primary" />
                  </div>
                  –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
                </CardTitle>
              </CardHeader>
              <CardContent className="p-6">
                <form onSubmit={handleSubmit} className="space-y-6">
                  <ModernSelect
                    options={serviceOptions}
                    value={formData.service_slug}
                    onValueChange={(value) => {
                      const selectedService = serviceOptions.find(s => s.value === value);
                      handleInputChange('service_slug', value as string);
                      handleInputChange('service_name', selectedService?.label || '');
                    }}
                    label="–¢–∏–ø —É—Å–ª—É–≥–∏"
                    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                    searchable={false}
                  />

                  <EnhancedFormField
                    id="contact_email"
                    name="contact_email"
                    type="email"
                    label="Email –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                    placeholder="test@example.com"
                    value={formData.contact_email}
                    onChange={(e) => {
                      handleInputChange('contact_email', e.target.value);
                      if (errors.contact_email) {
                        setErrors(prev => ({ ...prev, contact_email: '' }));
                      }
                    }}
                    error={errors.contact_email}
                    success={formData.contact_email.includes('@') && !errors.contact_email}
                    required
                    realTimeValidation
                    validationRules={[
                      (value) => !value.trim() ? 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' : null,
                      (value) => !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value) ? '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email' : null
                    ]}
                  />

                  <EnhancedFormField
                    id="contact_name"
                    name="contact_name"
                    type="text"
                    label="–ò–º—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                    placeholder="–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                    value={formData.contact_name}
                    onChange={(e) => {
                      handleInputChange('contact_name', e.target.value);
                      if (errors.contact_name) {
                        setErrors(prev => ({ ...prev, contact_name: '' }));
                      }
                    }}
                    error={errors.contact_name}
                    success={formData.contact_name.length > 0 && !errors.contact_name}
                    required
                    realTimeValidation
                    validationRules={[
                      (value) => !value.trim() ? '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' : null,
                      (value) => value.length < 2 ? '–ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞' : null
                    ]}
                  />

                  <EnhancedFormField
                    id="estimated_price"
                    name="estimated_price"
                    type="number"
                    label="–¢–µ—Å—Ç–æ–≤–∞—è —Ü–µ–Ω–∞ (–≤ –∫–æ–ø–µ–π–∫–∞—Ö)"
                    placeholder="5000"
                    value={formData.estimated_price.toString()}
                    onChange={(e) => handleInputChange('estimated_price', parseInt(e.target.value) || 0)}
                    tooltip="1 —Ä—É–±–ª—å = 100 –∫–æ–ø–µ–µ–∫"
                  />

                  <ProgressiveTextarea
                    id="details"
                    name="details"
                    label="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞"
                    placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã..."
                    value={formData.details}
                    onChange={(e) => handleInputChange('details', e.target.value)}
                    characterLimit={1000}
                    showWordCount
                    autoResize
                    minRows={4}
                    suggestions={[
                      "–¢–µ—Å—Ç–æ–≤–∞—è SEO-—Å—Ç–∞—Ç—å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã",
                      "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤",
                      "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π",
                      "–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤"
                    ]}
                  />

                  <Button 
                    type="submit" 
                    disabled={loading} 
                    className="submit-button-enhanced"
                    size="lg"
                  >
                    <div className="flex items-center justify-center gap-3">
                      {loading ? (
                        <>
                          <div className="form-spinner" />
                          –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞...
                        </>
                      ) : (
                        <>
                          <TestTube className="w-5 h-5 group-hover:rotate-12 transition-transform duration-300" />
                          –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑
                        </>
                      )}
                    </div>
                  </Button>
                </form>
              </CardContent>
            </Card>

            {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ */}
            <Card className="form-modern">
              <CardHeader className="bg-gradient-to-r from-success/5 to-success/10 border-b border-success/20">
                <CardTitle className="text-lg flex items-center gap-3">
                  <div className="p-2 bg-success/10 rounded-lg">
                    <CheckCircle className="w-4 h-4 text-success" />
                  </div>
                  –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4 p-6">
                {Object.entries(testResults).map(([test, passed]) => (
                  <div key={test} className="flex items-center justify-between">
                    <span className="text-sm capitalize">{test.replace(/([A-Z])/g, ' $1')}</span>
                    <Badge variant={passed ? 'default' : 'destructive'}>
                      {passed ? '‚úÖ –ü—Ä–æ—à–µ–ª' : '‚ùå –ù–µ –ø—Ä–æ—à–µ–ª'}
                    </Badge>
                  </div>
                ))}
                
                {Object.keys(testResults).length === 0 && (
                  <div className="text-center text-gray-500 text-sm">
                    –°–æ–∑–¥–∞–π—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
                  </div>
                )}
                
                <Button 
                  onClick={runSystemTests} 
                  variant="outline" 
                  size="sm"
                  className="w-full mt-4"
                >
                  –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –≤—Ä—É—á–Ω—É—é
                </Button>
              </CardContent>
            </Card>
          </div>

          <Separator className="my-6" />

          {/* –°—Ç–∞—Ç—É—Å—ã –∏ —Å–æ–±—ã—Ç–∏—è */}
          <div className="space-y-4">
            {error && (
              <Alert variant="destructive">
                <AlertCircle className="h-4 w-4" />
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            )}

            {success && (
              <Alert>
                <CheckCircle className="h-4 w-4" />
                <AlertDescription>
                  ‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! ID: {orderId}
                  <br />
                  –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.
                </AlertDescription>
              </Alert>
            )}

            {/* –°–æ–±—ã—Ç–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ */}
            {analyticsEvents.length > 0 && (
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">–°–æ–±—ã—Ç–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2 max-h-60 overflow-y-auto">
                    {analyticsEvents.map((event, index) => (
                      <div key={index} className="p-2 bg-gray-100 rounded text-xs">
                        <pre>{event}</pre>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            )}
          </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}
