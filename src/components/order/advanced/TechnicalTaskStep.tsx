import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { FileText, Search, Users, Target, Zap } from 'lucide-react';
import KeywordManager from './KeywordManager';
import ContentStructureBuilder from './ContentStructureBuilder';

interface TechnicalTaskStepProps {
  formData: any;
  onUpdate: (updates: any) => void;
  onNext: () => void;
  onPrevious: () => void;
}

export default function TechnicalTaskStep({ 
  formData, 
  onUpdate, 
  onNext, 
  onPrevious 
}: TechnicalTaskStepProps) {
  const [activeTab, setActiveTab] = useState('keywords');
  const [keywords, setKeywords] = useState<string[]>(formData.keywords || []);
  const [lsiKeywords, setLsiKeywords] = useState<string[]>(formData.lsiKeywords || []);
  const [contentStructure, setContentStructure] = useState(formData.contentStructure || []);
  const [competitorUrls, setCompetitorUrls] = useState<string[]>(formData.competitorUrls || []);
  const [targetAudience, setTargetAudience] = useState(formData.targetAudience || '');
  const [contentGoals, setContentGoals] = useState(formData.contentGoals || '');
  const [totalWordCount, setTotalWordCount] = useState(formData.totalWordCount || 3000);

  const handleKeywordsChange = (newKeywords: string[], mode: 'client' | 'auto') => {
    setKeywords(newKeywords);
    onUpdate({ keywords: newKeywords, keywordMode: mode });
  };

  const handleLSIKeywordsChange = (newLSIKeywords: string[], mode: 'client' | 'auto') => {
    setLsiKeywords(newLSIKeywords);
    onUpdate({ lsiKeywords: newLSIKeywords, lsiKeywordMode: mode });
  };

  const handleCompetitorAnalysisChange = (urls: string[]) => {
    setCompetitorUrls(urls);
    onUpdate({ competitorUrls: urls });
  };

  const handleStructureChange = (structure: any[], wordCount: number) => {
    setContentStructure(structure);
    setTotalWordCount(wordCount);
    onUpdate({ 
      contentStructure: structure, 
      totalWordCount: wordCount 
    });
  };

  const handleTargetAudienceChange = (value: string) => {
    setTargetAudience(value);
    onUpdate({ targetAudience: value });
  };

  const handleContentGoalsChange = (value: string) => {
    setContentGoals(value);
    onUpdate({ contentGoals: value });
  };

  const isTabComplete = (tab: string) => {
    switch (tab) {
      case 'keywords':
        return keywords.length > 0;
      case 'structure':
        return contentStructure.length > 0;
      case 'audience':
        return targetAudience.trim().length > 0;
      case 'goals':
        return contentGoals.trim().length > 0;
      default:
        return false;
    }
  };

  const completedTabs = ['keywords', 'structure', 'audience', 'goals'].filter(isTabComplete).length;
  const isStepComplete = completedTabs >= 3; // –º–∏–Ω–∏–º—É–º 3 –∏–∑ 4 —Ç–∞–±–æ–≤

  return (
    <div className="space-y-6">
      <div className="text-center space-y-4">
        <h3 className="text-2xl font-semibold">–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è</h3>
        <p className="text-muted-foreground">
          –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—á–Ω–æ–π —Å–º–µ—Ç—ã
        </p>
        
        <div className="flex items-center justify-center gap-4">
          <Badge variant={completedTabs >= 3 ? "default" : "secondary"} className="text-sm">
            –ó–∞–ø–æ–ª–Ω–µ–Ω–æ: {completedTabs}/4 —Ä–∞–∑–¥–µ–ª–æ–≤
          </Badge>
          <div className="w-32 bg-gray-200 rounded-full h-2">
            <div 
              className="bg-primary h-2 rounded-full transition-all duration-300"
              style={{ width: `${(completedTabs / 4) * 100}%` }}
            />
          </div>
        </div>
      </div>

      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <FileText className="w-5 h-5" />
            –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ
          </CardTitle>
        </CardHeader>
        
        <CardContent>
          <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
            <TabsList className="grid w-full grid-cols-4">
              <TabsTrigger value="keywords" className="relative">
                <Search className="w-4 h-4 mr-2" />
                –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                {isTabComplete('keywords') && (
                  <div className="absolute -top-1 -right-1 w-3 h-3 bg-green-500 rounded-full" />
                )}
              </TabsTrigger>
              
              <TabsTrigger value="structure" className="relative">
                <FileText className="w-4 h-4 mr-2" />
                –°—Ç—Ä—É–∫—Ç—É—Ä–∞
                {isTabComplete('structure') && (
                  <div className="absolute -top-1 -right-1 w-3 h-3 bg-green-500 rounded-full" />
                )}
              </TabsTrigger>
              
              <TabsTrigger value="audience" className="relative">
                <Users className="w-4 h-4 mr-2" />
                –ê—É–¥–∏—Ç–æ—Ä–∏—è
                {isTabComplete('audience') && (
                  <div className="absolute -top-1 -right-1 w-3 h-3 bg-green-500 rounded-full" />
                )}
              </TabsTrigger>
              
              <TabsTrigger value="goals" className="relative">
                <Target className="w-4 h-4 mr-2" />
                –¶–µ–ª–∏
                {isTabComplete('goals') && (
                  <div className="absolute -top-1 -right-1 w-3 h-3 bg-green-500 rounded-full" />
                )}
              </TabsTrigger>
            </TabsList>

            <TabsContent value="keywords" className="space-y-6">
              <KeywordManager
                onKeywordsChange={handleKeywordsChange}
                onLSIKeywordsChange={handleLSIKeywordsChange}
                onCompetitorAnalysisChange={handleCompetitorAnalysisChange}
                initialKeywords={keywords}
                initialLSIKeywords={lsiKeywords}
              />
            </TabsContent>

            <TabsContent value="structure" className="space-y-6">
              <ContentStructureBuilder
                onStructureChange={handleStructureChange}
                initialStructure={contentStructure}
                targetWordCount={3000}
              />
            </TabsContent>

            <TabsContent value="audience" className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Users className="w-5 h-5" />
                    –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <Label htmlFor="target-audience" className="text-base font-medium">
                      –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é *
                    </Label>
                    <Textarea
                      id="target-audience"
                      value={targetAudience}
                      onChange={(e) => handleTargetAudienceChange(e.target.value)}
                      placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–∏ 25-40 –ª–µ—Ç, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π –±–∏–∑–Ω–µ—Å–∞, —Å–æ —Å—Ä–µ–¥–Ω–∏–º –¥–æ—Ö–æ–¥–æ–º –æ—Ç 100k —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü..."
                      className="min-h-32 mt-2"
                      required
                    />
                  </div>
                  
                  <div className="bg-blue-50 rounded-lg p-4 space-y-2">
                    <div className="text-sm font-medium text-blue-800 mb-2">üí° –ß—Ç–æ —É–∫–∞–∑–∞—Ç—å –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏:</div>
                    <div className="text-sm text-blue-700 space-y-1">
                      <div>‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç –∏ –ø–æ–ª</div>
                      <div>‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏—è –∏–ª–∏ —Å—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</div>
                      <div>‚Ä¢ –ò–Ω—Ç–µ—Ä–µ—Å—ã –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏</div>
                      <div>‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –¥–æ—Ö–æ–¥–∞</div>
                      <div>‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ—à–∞–µ—Ç –≤–∞—à –ø—Ä–æ–¥—É–∫—Ç/—É—Å–ª—É–≥–∞</div>
                      <div>‚Ä¢ –ì–¥–µ –æ–Ω–∏ –∏—â—É—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (—Å–æ—Ü—Å–µ—Ç–∏, –ø–æ–∏—Å–∫–æ–≤–∏–∫–∏, —Ñ–æ—Ä—É–º—ã)</div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="goals" className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Target className="w-5 h-5" />
                    –¶–µ–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <Label htmlFor="content-goals" className="text-base font-medium">
                      –ö–∞–∫–∏–µ —Ü–µ–ª–∏ –¥–æ–ª–∂–µ–Ω –¥–æ—Å—Ç–∏–≥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç? *
                    </Label>
                    <Textarea
                      id="content-goals"
                      value={contentGoals}
                      onChange={(e) => handleContentGoalsChange(e.target.value)}
                      placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏ —É—Å–ª—É–≥ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –Ω–∞ 30%, –ø–æ–≤—ã—Å–∏—Ç—å —É–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç—å –±—Ä–µ–Ω–¥–∞, –ø—Ä–∏–≤–ª–µ—á—å 500 –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –º–µ—Å—è—Ü..."
                      className="min-h-32 mt-2"
                      required
                    />
                  </div>
                  
                  <div className="bg-green-50 rounded-lg p-4 space-y-2">
                    <div className="text-sm font-medium text-green-800 mb-2">üéØ –ü—Ä–∏–º–µ—Ä—ã —Ü–µ–ª–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</div>
                    <div className="text-sm text-green-700 space-y-1">
                      <div>‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ X%</div>
                      <div>‚Ä¢ –ü—Ä–∏–≤–ª–µ—á—å –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤</div>
                      <div>‚Ä¢ –ü–æ–≤—ã—Å–∏—Ç—å —É–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç—å –±—Ä–µ–Ω–¥–∞</div>
                      <div>‚Ä¢ –£–ª—É—á—à–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø–æ–∏—Å–∫–µ</div>
                      <div>‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫ –Ω–∞ —Å–∞–π—Ç</div>
                      <div>‚Ä¢ –°—Ç–∞—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–æ–º –≤ –æ–±–ª–∞—Å—Ç–∏</div>
                      <div>‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ</div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>

      {/* –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä */}
      {isStepComplete && (
        <Card className="border-green-200 bg-green-50">
          <CardContent className="p-4">
            <div className="flex items-center gap-2 mb-3">
              <Zap className="w-5 h-5 text-green-600" />
              <span className="font-medium text-green-800">–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–∞!</span>
            </div>
            
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
              <div>
                <div className="text-gray-600">–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</div>
                <div className="font-medium">{keywords.length + lsiKeywords.length}</div>
              </div>
              
              <div>
                <div className="text-gray-600">–†–∞–∑–¥–µ–ª–æ–≤:</div>
                <div className="font-medium">{contentStructure.length}</div>
              </div>
              
              <div>
                <div className="text-gray-600">–û–±—ä–µ–º:</div>
                <div className="font-medium">{totalWordCount.toLocaleString()} —Å–ª–æ–≤</div>
              </div>
              
              <div>
                <div className="text-gray-600">–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞:</div>
                <div className="font-medium text-green-600">
                  {(totalWordCount * 3).toLocaleString()}‚ÇΩ
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
      <div className="flex gap-4">
        <Button variant="outline" onClick={onPrevious} className="flex-1">
          –ù–∞–∑–∞–¥
        </Button>
        <Button 
          onClick={onNext} 
          disabled={!isStepComplete}
          className="flex-1"
        >
          –°–æ–∑–¥–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å–º–µ—Ç—É
        </Button>
      </div>
    </div>
  );
}