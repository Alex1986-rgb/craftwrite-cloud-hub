
import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Checkbox } from '@/components/ui/checkbox';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { CreditCard, Shield, Clock, CheckCircle, AlertCircle, ExternalLink } from 'lucide-react';
import { PaymentMethod, OrderFormData } from '@/types/advancedOrder';
import { useToast } from '@/hooks/use-toast';

interface IntegratedPaymentFormProps {
  orderData: OrderFormData;
  onPersonalInfoChange: (info: Partial<OrderFormData['personalInfo']>) => void;
  onSubmit: (paymentMethod: PaymentMethod) => Promise<void>;
  isLoading: boolean;
  className?: string;
}

const PAYMENT_METHODS: PaymentMethod[] = [
  {
    id: 'stripe_card',
    name: '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞',
    icon: 'üí≥',
    fee: 0,
    description: 'Visa, MasterCard, –ú–ò–†',
    supported: true
  },
  {
    id: 'yookassa',
    name: '–ÆKassa',
    icon: 'üè¶',
    fee: 0,
    description: '–í—Å–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –ÆKassa',
    supported: true
  },
  {
    id: 'sberbank',
    name: '–°–±–µ—Ä–±–∞–Ω–∫ –û–Ω–ª–∞–π–Ω',
    icon: 'üü¢',
    fee: 0,
    description: '–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –°–±–µ—Ä–±–∞–Ω–∫',
    supported: true
  },
  {
    id: 'paypal',
    name: 'PayPal',
    icon: 'üîµ',
    fee: 2.9,
    description: '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏',
    supported: false
  },
  {
    id: 'crypto',
    name: '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞',
    icon: '‚Çø',
    fee: 1,
    description: 'Bitcoin, Ethereum, USDT',
    supported: false
  }
];

export default function IntegratedPaymentForm({
  orderData,
  onPersonalInfoChange,
  onSubmit,
  isLoading,
  className
}: IntegratedPaymentFormProps) {
  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState<PaymentMethod | null>(null);
  const [agreementAccepted, setAgreementAccepted] = useState(false);
  const [emailNotifications, setEmailNotifications] = useState(true);
  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});
  const { toast } = useToast();

  const validatePersonalInfo = (): boolean => {
    const errors: Record<string, string> = {};
    
    if (!orderData.personalInfo.name?.trim()) {
      errors.name = '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è';
    }
    
    if (!orderData.personalInfo.email?.trim()) {
      errors.email = 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è';
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(orderData.personalInfo.email)) {
      errors.email = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email';
    }
    
    setValidationErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const handleSubmit = async () => {
    if (!validatePersonalInfo()) {
      toast({
        title: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
        description: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
        variant: "destructive"
      });
      return;
    }

    if (!selectedPaymentMethod) {
      toast({
        title: "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã",
        description: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è",
        variant: "destructive"
      });
      return;
    }

    if (!agreementAccepted) {
      toast({
        title: "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ",
        description: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è —Å–æ–≥–ª–∞—à–µ–Ω–∏—è",
        variant: "destructive"
      });
      return;
    }

    try {
      await onSubmit(selectedPaymentMethod);
    } catch (error) {
      console.error('Payment submission error:', error);
    }
  };

  const getFinalPrice = () => {
    if (!selectedPaymentMethod) return orderData.pricing.totalPrice;
    
    const fee = selectedPaymentMethod.fee || 0;
    return orderData.pricing.totalPrice + Math.round(orderData.pricing.totalPrice * fee / 100);
  };

  return (
    <div className={`space-y-6 ${className}`}>
      {/* –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <CheckCircle className="w-5 h-5" />
            –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="name">–ò–º—è *</Label>
              <Input
                id="name"
                value={orderData.personalInfo.name || ''}
                onChange={(e) => onPersonalInfoChange({ name: e.target.value })}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                className={validationErrors.name ? 'border-red-500' : ''}
              />
              {validationErrors.name && (
                <p className="text-sm text-red-600">{validationErrors.name}</p>
              )}
            </div>

            <div className="space-y-2">
              <Label htmlFor="email">Email *</Label>
              <Input
                id="email"
                type="email"
                value={orderData.personalInfo.email || ''}
                onChange={(e) => onPersonalInfoChange({ email: e.target.value })}
                placeholder="your@email.com"
                className={validationErrors.email ? 'border-red-500' : ''}
              />
              {validationErrors.email && (
                <p className="text-sm text-red-600">{validationErrors.email}</p>
              )}
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="phone">–¢–µ–ª–µ—Ñ–æ–Ω</Label>
              <Input
                id="phone"
                value={orderData.personalInfo.phone || ''}
                onChange={(e) => onPersonalInfoChange({ phone: e.target.value })}
                placeholder="+7 (999) 123-45-67"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="company">–ö–æ–º–ø–∞–Ω–∏—è</Label>
              <Input
                id="company"
                value={orderData.personalInfo.company || ''}
                onChange={(e) => onPersonalInfoChange({ company: e.target.value })}
                placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏"
              />
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="additional">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è</Label>
            <Textarea
              id="additional"
              placeholder="–õ—é–±—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –∑–∞–∫–∞–∑—É"
              rows={3}
            />
          </div>
        </CardContent>
      </Card>

      {/* –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <CreditCard className="w-5 h-5" />
            –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 gap-3">
            {PAYMENT_METHODS.map((method) => (
              <div
                key={method.id}
                className={`p-4 border rounded-lg cursor-pointer transition-all ${
                  selectedPaymentMethod?.id === method.id
                    ? 'border-primary bg-primary/5 ring-2 ring-primary/20'
                    : method.supported
                    ? 'border-gray-200 hover:border-gray-300'
                    : 'border-gray-100 opacity-50 cursor-not-allowed'
                }`}
                onClick={() => method.supported && setSelectedPaymentMethod(method)}
              >
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <span className="text-2xl">{method.icon}</span>
                    <div>
                      <div className="font-medium flex items-center gap-2">
                        {method.name}
                        {!method.supported && (
                          <Badge variant="secondary">–°–∫–æ—Ä–æ</Badge>
                        )}
                      </div>
                      <div className="text-sm text-muted-foreground">{method.description}</div>
                    </div>
                  </div>
                  <div className="text-right">
                    {method.fee && method.fee > 0 ? (
                      <div className="text-sm text-orange-600">+{method.fee}%</div>
                    ) : (
                      <div className="text-sm text-green-600">–ë–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏</div>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å */}
      <Card>
        <CardHeader>
          <CardTitle>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <div className="flex justify-between">
              <span>–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞:</span>
              <span>{orderData.pricing.totalPrice.toLocaleString()} {orderData.pricing.currency}</span>
            </div>
            
            {selectedPaymentMethod?.fee && selectedPaymentMethod.fee > 0 && (
              <div className="flex justify-between text-sm text-muted-foreground">
                <span>–ö–æ–º–∏—Å—Å–∏—è ({selectedPaymentMethod.fee}%):</span>
                <span>+{Math.round(orderData.pricing.totalPrice * selectedPaymentMethod.fee / 100).toLocaleString()} {orderData.pricing.currency}</span>
              </div>
            )}
            
            <Separator />
            
            <div className="flex justify-between text-lg font-bold">
              <span>–ö –æ–ø–ª–∞—Ç–µ:</span>
              <span className="text-primary">
                {getFinalPrice().toLocaleString()} {orderData.pricing.currency}
              </span>
            </div>
          </div>

          <div className="space-y-3">
            <div className="flex items-center gap-2">
              <Clock className="w-4 h-4 text-muted-foreground" />
              <span className="text-sm text-muted-foreground">
                –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {orderData.timeline.estimatedDays} –¥–Ω–µ–π
              </span>
            </div>

            <div className="flex items-center gap-2">
              <Shield className="w-4 h-4 text-green-600" />
              <span className="text-sm text-green-700">
                –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
              </span>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* –°–æ–≥–ª–∞—Å–∏—è –∏ —á–µ–∫–±–æ–∫—Å—ã */}
      <Card>
        <CardContent className="pt-6 space-y-4">
          <div className="flex items-start space-x-2">
            <Checkbox
              id="agreement"
              checked={agreementAccepted}
              onCheckedChange={(checked) => setAgreementAccepted(checked as boolean)}
            />
            <Label htmlFor="agreement" className="text-sm leading-relaxed">
              –Ø –ø—Ä–∏–Ω–∏–º–∞—é{' '}
              <a href="/privacy" target="_blank" className="text-primary hover:underline">
                —É—Å–ª–æ–≤–∏—è —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
              </a>{' '}
              –∏ –¥–∞—é —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            </Label>
          </div>

          <div className="flex items-start space-x-2">
            <Checkbox
              id="notifications"
              checked={emailNotifications}
              onCheckedChange={(checked) => setEmailNotifications(checked as boolean)}
            />
            <Label htmlFor="notifications" className="text-sm">
              –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞ –Ω–∞ email
            </Label>
          </div>
        </CardContent>
      </Card>

      {/* –ö–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã */}
      <Button
        onClick={handleSubmit}
        disabled={isLoading || !selectedPaymentMethod || !agreementAccepted}
        className="w-full h-12 text-lg font-medium"
        size="lg"
      >
        {isLoading ? (
          '–û–±—Ä–∞–±–æ—Ç–∫–∞...'
        ) : (
          <>
            –û–ø–ª–∞—Ç–∏—Ç—å {getFinalPrice().toLocaleString()} {orderData.pricing.currency}
            <ExternalLink className="w-4 h-4 ml-2" />
          </>
        )}
      </Button>

      {selectedPaymentMethod && (
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
          <div className="flex items-start gap-2">
            <AlertCircle className="w-4 h-4 text-blue-600 mt-0.5" />
            <div className="text-sm text-blue-800">
              <div className="font-medium mb-1">–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:</div>
              <ul className="space-y-1 text-blue-700">
                <li>‚Ä¢ –í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã {selectedPaymentMethod.name}</li>
                <li>‚Ä¢ –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑ –ø–æ—Å—Ç—É–ø–∏—Ç –≤ —Ä–∞–±–æ—Ç—É</li>
                <li>‚Ä¢ –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ email –æ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç—ã</li>
                <li>‚Ä¢ –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤</li>
              </ul>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
