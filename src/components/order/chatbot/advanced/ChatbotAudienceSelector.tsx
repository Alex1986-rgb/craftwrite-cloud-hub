
import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Users, Brain, MessageSquare } from 'lucide-react';

interface ChatbotAudienceSelectorProps {
  onAudienceChange: (audience: string, scenarios: string[], style: string) => void;
  initialAudience?: string;
}

const AUDIENCE_TYPES = {
  b2b: {
    label: 'B2B –∫–ª–∏–µ–Ω—Ç—ã',
    description: '–ë–∏–∑–Ω–µ—Å-–∞—É–¥–∏—Ç–æ—Ä–∏—è, –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã',
    scenarios: [
      '–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –ª–∏–¥–æ–≤',
      '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —É—Å–ª—É–≥',
      '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤—Å—Ç—Ä–µ—á',
      '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤',
      '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞'
    ],
    style: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏ –¥–µ–ª–æ–≤–æ–π',
    icon: 'üíº'
  },
  b2c: {
    label: 'B2C –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏',
    description: '–ö–æ–Ω–µ—á–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏, —á–∞—Å—Ç–Ω—ã–µ –ª–∏—Ü–∞',
    scenarios: [
      '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ —Ç–æ–≤–∞—Ä–∞–º',
      '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤',
      '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤',
      '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏',
      '–û—Ç–∑—ã–≤—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'
    ],
    style: '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π',
    icon: 'üõçÔ∏è'
  },
  education: {
    label: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
    description: '–°—Ç—É–¥–µ–Ω—Ç—ã, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏, —É—á–µ–±–Ω—ã–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è',
    scenarios: [
      '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–∞—Ö',
      '–ó–∞–ø–∏—Å—å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ',
      '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π',
      '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
      '–û—Ü–µ–Ω–∫–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'
    ],
    style: '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π',
    icon: 'üéì'
  },
  healthcare: {
    label: '–ú–µ–¥–∏—Ü–∏–Ω–∞',
    description: '–ü–∞—Ü–∏–µ–Ω—Ç—ã, –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è',
    scenarios: [
      '–ó–∞–ø–∏—Å—å –∫ –≤—Ä–∞—á—É',
      '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏',
      '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤',
      '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–µ–º–µ',
      '–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å'
    ],
    style: '–î–µ–ª–∏–∫–∞—Ç–Ω—ã–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π',
    icon: 'üè•'
  },
  ecommerce: {
    label: '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω',
    description: '–ü–æ–∫—É–ø–∞—Ç–µ–ª–∏ –æ–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω–æ–≤',
    scenarios: [
      '–ü–æ–º–æ—â—å –≤ –≤—ã–±–æ—Ä–µ —Ç–æ–≤–∞—Ä–∞',
      '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞',
      '–í–æ–∑–≤—Ä–∞—Ç—ã –∏ –æ–±–º–µ–Ω—ã',
      '–ü—Ä–æ–º–æ–∫–æ–¥—ã –∏ —Å–∫–∏–¥–∫–∏',
      '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤'
    ],
    style: '–ü—Ä–æ–¥–∞—é—â–∏–π –∏ –≤–æ–≤–ª–µ–∫–∞—é—â–∏–π',
    icon: 'üõí'
  },
  finance: {
    label: '–§–∏–Ω–∞–Ω—Å—ã',
    description: '–ö–ª–∏–µ–Ω—Ç—ã –±–∞–Ω–∫–æ–≤, —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —É—Å–ª—É–≥',
    scenarios: [
      '–ë–∞–ª–∞–Ω—Å –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏',
      '–ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã',
      '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏',
      '–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–∞—Ä—Ç',
      '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º'
    ],
    style: '–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π',
    icon: 'üí∞'
  },
  realestate: {
    label: '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
    description: '–ü–æ–∫—É–ø–∞—Ç–µ–ª–∏ –∏ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏',
    scenarios: [
      '–ü–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–æ–≤',
      '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤',
      '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–π–æ–Ω–∞—Ö',
      '–ò–ø–æ—Ç–µ—á–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã',
      '–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã'
    ],
    style: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ç–∏–≤–Ω—ã–π –∏ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π',
    icon: 'üè†'
  },
  entertainment: {
    label: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
    description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤',
    scenarios: [
      '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
      '–ë–∏–ª–µ—Ç—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
      '–ò–≥—Ä–æ–≤—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
      '–ö–æ–Ω–∫—É—Ä—Å—ã –∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏',
      '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏'
    ],
    style: '–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∏ —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π',
    icon: 'üéÆ'
  }
};

export default function ChatbotAudienceSelector({ 
  onAudienceChange, 
  initialAudience = '' 
}: ChatbotAudienceSelectorProps) {
  const [selectedAudience, setSelectedAudience] = useState(initialAudience);

  const handleAudienceSelect = (audienceKey: string) => {
    setSelectedAudience(audienceKey);
    
    const audienceData = AUDIENCE_TYPES[audienceKey as keyof typeof AUDIENCE_TYPES];
    if (audienceData) {
      onAudienceChange(audienceData.label, audienceData.scenarios, audienceData.style);
    }
  };

  const currentAudience = selectedAudience ? AUDIENCE_TYPES[selectedAudience as keyof typeof AUDIENCE_TYPES] : null;

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Users className="w-5 h-5" />
          –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="space-y-2">
          <label className="text-sm font-medium">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞—É–¥–∏—Ç–æ—Ä–∏–∏</label>
          <Select value={selectedAudience} onValueChange={handleAudienceSelect}>
            <SelectTrigger>
              <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é" />
            </SelectTrigger>
            <SelectContent>
              {Object.entries(AUDIENCE_TYPES).map(([key, audience]) => (
                <SelectItem key={key} value={key}>
                  <div className="flex items-center gap-2">
                    <span>{audience.icon}</span>
                    <span>{audience.label}</span>
                  </div>
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>

        {currentAudience && (
          <div className="space-y-4">
            <div className="p-4 bg-blue-50 rounded-lg border border-blue-200">
              <div className="flex items-center gap-2 mb-2">
                <span className="text-2xl">{currentAudience.icon}</span>
                <h3 className="font-medium">{currentAudience.label}</h3>
              </div>
              <p className="text-sm text-blue-800 mb-3">{currentAudience.description}</p>
              
              <div className="flex items-center gap-2 mb-2">
                <MessageSquare className="w-4 h-4" />
                <span className="text-sm font-medium">–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:</span>
              </div>
              <Badge variant="outline" className="mb-3">
                {currentAudience.style}
              </Badge>
              
              <div className="flex items-center gap-2 mb-2">
                <Brain className="w-4 h-4" />
                <span className="text-sm font-medium">–¢–∏–ø–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:</span>
              </div>
              <div className="space-y-1">
                {currentAudience.scenarios.map((scenario, index) => (
                  <div key={index} className="text-sm text-blue-700">
                    ‚Ä¢ {scenario}
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        <div className="grid grid-cols-2 md:grid-cols-4 gap-2">
          {Object.entries(AUDIENCE_TYPES).map(([key, audience]) => (
            <button
              key={key}
              type="button"
              onClick={() => handleAudienceSelect(key)}
              className={`p-2 text-center rounded-lg border transition-all hover:shadow-md ${
                selectedAudience === key 
                  ? 'border-blue-500 bg-blue-50' 
                  : 'border-gray-200 bg-white'
              }`}
            >
              <div className="text-xl mb-1">{audience.icon}</div>
              <div className="text-xs font-medium">{audience.label}</div>
            </button>
          ))}
        </div>
      </CardContent>
    </Card>
  );
}
