import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { CheckCircle, AlertCircle, Play, Monitor, Settings, Rocket, Clock } from 'lucide-react';
import SystemTester from './SystemTester';
import { useTelegramIntegration } from '@/hooks/useTelegramIntegration';
import { useAdvancedAnalytics } from '@/hooks/useAdvancedAnalytics';
import { supabase } from '@/integrations/supabase/client';
import { toast } from '@/hooks/use-toast';

interface LaunchStep {
  id: string;
  title: string;
  description: string;
  status: 'pending' | 'in_progress' | 'completed' | 'failed';
  icon: any;
  component?: React.ReactNode;
}

export default function LaunchDashboard() {
  const [currentStep, setCurrentStep] = useState(0);
  const [systemTestsPassed, setSystemTestsPassed] = useState(false);
  const [notificationsSetup, setNotificationsSetup] = useState(false);
  const [metricsEnabled, setMetricsEnabled] = useState(false);
  const [productionReady, setProductionReady] = useState(false);
  
  const { integration } = useTelegramIntegration();
  const { kpis, updateKPIs } = useAdvancedAnalytics();

  const checkNotificationSetup = async () => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      const { data: emailSettings } = await supabase
        .from('system_settings')
        .select('*')
        .eq('key', 'email_notifications_enabled')
        .single();

      const telegramActive = integration?.is_active || false;
      const emailActive = emailSettings?.value?.enabled || false;

      setNotificationsSetup(telegramActive || emailActive);
    } catch (error) {
      console.error('Error checking notifications:', error);
    }
  };

  const checkMetrics = () => {
    setMetricsEnabled(kpis.length > 0);
  };

  const [steps, setSteps] = useState<LaunchStep[]>([
    {
      id: 'testing',
      title: '–§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
      description: '–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã',
      status: 'pending',
      icon: Play,
      component: <SystemTester />
    },
    {
      id: 'notifications',
      title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
      description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ Email/Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π',
      status: 'pending',
      icon: Settings
    },
    {
      id: 'monitoring',
      title: '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–µ—Ç—Ä–∏–∫',
      description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è KPI',
      status: 'pending',
      icon: Monitor
    },
    {
      id: 'launch',
      title: '–ó–∞–ø—É—Å–∫ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω',
      description: '–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ',
      status: 'pending',
      icon: Rocket
    }
  ]);

  useEffect(() => {
    checkNotificationSetup();
    checkMetrics();
  }, [integration, kpis]);

  useEffect(() => {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —à–∞–≥–æ–≤
    setSteps(prev => prev.map(step => {
      switch (step.id) {
        case 'testing':
          return { ...step, status: systemTestsPassed ? 'completed' : 'pending' };
        case 'notifications':
          return { ...step, status: notificationsSetup ? 'completed' : 'pending' };
        case 'monitoring':
          return { ...step, status: metricsEnabled ? 'completed' : 'pending' };
        case 'launch':
          return { 
            ...step, 
            status: (systemTestsPassed && notificationsSetup && metricsEnabled) ? 'completed' : 'pending' 
          };
        default:
          return step;
      }
    }));

    setProductionReady(systemTestsPassed && notificationsSetup && metricsEnabled);
  }, [systemTestsPassed, notificationsSetup, metricsEnabled]);

  const runStep = async (stepId: string, stepIndex: number) => {
    setCurrentStep(stepIndex);
    
    setSteps(prev => prev.map(step => 
      step.id === stepId ? { ...step, status: 'in_progress' } : step
    ));

    try {
      switch (stepId) {
        case 'testing':
          // –¢–µ—Å—Ç—ã –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç SystemTester
          toast({
            title: "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ",
            description: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –Ω–∏–∂–µ"
          });
          break;
          
        case 'notifications':
          await checkNotificationSetup();
          
          if (!integration?.is_active) {
            toast({
              title: "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ Telegram",
              description: "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
              variant: "destructive"
            });
            return;
          }
          
          setNotificationsSetup(true);
          toast({
            title: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã",
            description: "Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞"
          });
          break;
          
        case 'monitoring':
          await updateKPIs();
          setMetricsEnabled(true);
          toast({
            title: "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
            description: "KPI –º–µ—Ç—Ä–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã"
          });
          break;
          
        case 'launch':
          if (productionReady) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω
            await supabase
              .from('system_settings')
              .upsert({
                key: 'production_ready',
                value: { enabled: true, timestamp: new Date().toISOString() },
                description: '–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –∑–∞–ø—É—Å–∫—É'
              });
            
            setProductionReady(true);
            toast({
              title: "üöÄ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞!",
              description: "CopyPro Cloud –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã",
            });
          }
          break;
      }
    } catch (error: any) {
      console.error('Error running step:', error);
      setSteps(prev => prev.map(step => 
        step.id === stepId ? { ...step, status: 'failed' } : step
      ));
      
      toast({
        title: "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
        description: error.message,
        variant: "destructive"
      });
    }
  };

  const getStatusIcon = (status: LaunchStep['status']) => {
    switch (status) {
      case 'completed':
        return <CheckCircle className="h-5 w-5 text-green-500" />;
      case 'failed':
        return <AlertCircle className="h-5 w-5 text-red-500" />;
      case 'in_progress':
        return <Clock className="h-5 w-5 text-blue-500 animate-spin" />;
      default:
        return <div className="h-5 w-5 rounded-full bg-gray-300" />;
    }
  };

  const getStatusBadge = (status: LaunchStep['status']) => {
    switch (status) {
      case 'completed':
        return <Badge className="bg-green-100 text-green-800">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</Badge>;
      case 'failed':
        return <Badge variant="destructive">–û—à–∏–±–∫–∞</Badge>;
      case 'in_progress':
        return <Badge variant="secondary">–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è</Badge>;
      default:
        return <Badge variant="outline">–û–∂–∏–¥–∞–µ—Ç</Badge>;
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã</h1>
          <p className="text-muted-foreground">
            –ü–æ—à–∞–≥–æ–≤–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ CopyPro Cloud –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –∑–∞–ø—É—Å–∫—É
          </p>
        </div>
        {productionReady && (
          <Badge className="bg-green-100 text-green-800 text-lg px-4 py-2">
            ‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –∑–∞–ø—É—Å–∫—É
          </Badge>
        )}
      </div>

      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
      <Card>
        <CardHeader>
          <CardTitle>–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–ø—É—Å–∫–∞</CardTitle>
          <CardDescription>
            {steps.filter(s => s.status === 'completed').length} –∏–∑ {steps.length} —à–∞–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex justify-between mb-4">
            {steps.map((step, index) => (
              <div key={step.id} className="flex flex-col items-center space-y-2">
                <div className={`p-3 rounded-full ${
                  step.status === 'completed' ? 'bg-green-100' :
                  step.status === 'in_progress' ? 'bg-blue-100' :
                  step.status === 'failed' ? 'bg-red-100' : 'bg-gray-100'
                }`}>
                  <step.icon className={`h-6 w-6 ${
                    step.status === 'completed' ? 'text-green-600' :
                    step.status === 'in_progress' ? 'text-blue-600' :
                    step.status === 'failed' ? 'text-red-600' : 'text-gray-400'
                  }`} />
                </div>
                <span className="text-sm text-center max-w-24">{step.title}</span>
                {index < steps.length - 1 && (
                  <div className={`h-1 w-12 ${
                    step.status === 'completed' ? 'bg-green-300' : 'bg-gray-200'
                  }`} />
                )}
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* –®–∞–≥–∏ –∑–∞–ø—É—Å–∫–∞ */}
      <div className="grid gap-6">
        {steps.map((step, index) => (
          <Card key={step.id} className="transition-all duration-200">
            <CardHeader>
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  {getStatusIcon(step.status)}
                  <div>
                    <CardTitle className="text-xl">{step.title}</CardTitle>
                    <CardDescription>{step.description}</CardDescription>
                  </div>
                </div>
                <div className="flex items-center gap-3">
                  {getStatusBadge(step.status)}
                  <Button
                    onClick={() => runStep(step.id, index)}
                    disabled={step.status === 'in_progress'}
                    variant={step.status === 'completed' ? 'outline' : 'default'}
                  >
                    {step.status === 'completed' ? '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å' : 
                     step.status === 'in_progress' ? '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å'}
                  </Button>
                </div>
              </div>
            </CardHeader>
            
            {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ */}
            {currentStep === index && step.component && (
              <CardContent>
                <div className="border-t pt-6">
                  {step.component}
                </div>
              </CardContent>
            )}
            
            {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞ */}
            {step.id === 'notifications' && (
              <CardContent>
                <Alert>
                  <Settings className="h-4 w-4" />
                  <AlertDescription>
                    –°—Ç–∞—Ç—É—Å: Telegram - {integration?.is_active ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}
                    <br />
                    {!integration?.is_active && '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí Telegram –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'}
                  </AlertDescription>
                </Alert>
              </CardContent>
            )}
            
            {step.id === 'monitoring' && (
              <CardContent>
                <Alert>
                  <Monitor className="h-4 w-4" />
                  <AlertDescription>
                    KPI –º–µ—Ç—Ä–∏–∫–∏: {kpis.length > 0 ? `‚úÖ –ê–∫—Ç–∏–≤–Ω–æ (${kpis.length} –º–µ—Ç—Ä–∏–∫)` : '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}
                    <br />
                    {kpis.length === 0 && '–ú–µ—Ç—Ä–∏–∫–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞'}
                  </AlertDescription>
                </Alert>
              </CardContent>
            )}
            
            {step.id === 'launch' && productionReady && (
              <CardContent>
                <Alert>
                  <Rocket className="h-4 w-4" />
                  <AlertDescription>
                    üéâ <strong>–°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞!</strong>
                    <br />
                    ‚Ä¢ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ
                    <br />
                    ‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç
                    <br />
                    ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–µ—Ç—Ä–∏–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
                    <br />
                    ‚Ä¢ CopyPro Cloud –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—ã
                  </AlertDescription>
                </Alert>
              </CardContent>
            )}
          </Card>
        ))}
      </div>

      {/* –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ */}
      {productionReady && (
        <Card className="border-green-200 bg-green-50">
          <CardContent className="pt-6">
            <div className="text-center space-y-4">
              <div className="text-4xl">üéâ</div>
              <h3 className="text-2xl font-bold text-green-800">
                CopyPro Cloud —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!
              </h3>
              <p className="text-green-700">
                –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã –∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.
                –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
              </p>
              <div className="flex justify-center gap-4 pt-4">
                <Button size="lg" className="bg-green-600 hover:bg-green-700">
                  –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–∫–∞–∑–∞–º
                </Button>
                <Button variant="outline" size="lg">
                  –û—Ç–∫—Ä—ã—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}