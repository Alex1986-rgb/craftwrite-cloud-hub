
import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Label } from "@/components/ui/label";
import { MessageSquare, Plus, Copy, Edit, Trash2, Search, ThumbsUp, BookOpen, Star, Eye } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

interface PromptItem {
  id: string;
  title: string;
  prompt: string;
  category: string;
  niche: string;
  difficulty: string;
  tags: string[];
  isCustom: boolean;
  usageCount: number;
  rating: number;
  description: string;
  examples?: string[];
  createdAt: Date;
}

interface PromptLibraryProps {
  onSelectPrompt: (prompt: string) => void;
}

export default function PromptLibrary({ onSelectPrompt }: PromptLibraryProps) {
  const [searchQuery, setSearchQuery] = useState("");
  const [categoryFilter, setCategoryFilter] = useState("all");
  const [nicheFilter, setNicheFilter] = useState("all");
  const [difficultyFilter, setDifficultyFilter] = useState("all");
  const [showCreateDialog, setShowCreateDialog] = useState(false);
  const [showPreviewDialog, setShowPreviewDialog] = useState(false);
  const [previewPrompt, setPreviewPrompt] = useState<PromptItem | null>(null);
  const [newPrompt, setNewPrompt] = useState({
    title: "",
    description: "",
    prompt: "",
    category: "",
    niche: "",
    difficulty: "",
    tags: "",
    examples: ""
  });
  const { toast } = useToast();

  const defaultPrompts: PromptItem[] = [
    {
      id: "1",
      title: "SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è",
      description: "–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–µ–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∏ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏",
      prompt: "–ù–∞–ø–∏—à–∏ SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç—å—é –Ω–∞ —Ç–µ–º—É [–¢–ï–ú–ê] –æ–±—ä–µ–º–æ–º [–û–ë–™–ï–ú] —Å–ª–æ–≤. –í–∫–ª—é—á–∏:\n- –ü—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º\n- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏ H2-H3\n- –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: [–ö–õ–Æ–ß–ï–í–´–ï_–°–õ–û–í–ê]\n- –ú–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ 160 —Å–∏–º–≤–æ–ª–æ–≤\n- –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é –≤ –∫–æ–Ω—Ü–µ\n\n–°—Ç—Ä—É–∫—Ç—É—Ä–∞:\n1. –í–≤–µ–¥–µ–Ω–∏–µ —Å —Ö—É–∫–æ–º\n2. –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã —Å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏\n3. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã\n4. –ó–∞–∫–ª—é—á–µ–Ω–∏–µ —Å –≤—ã–≤–æ–¥–∞–º–∏",
      category: "seo",
      niche: "universal",
      difficulty: "intermediate",
      tags: ["seo", "—Å—Ç–∞—Ç—å—è", "–±–ª–æ–≥", "–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", "—Å—Ç—Ä—É–∫—Ç—É—Ä–∞"],
      isCustom: false,
      usageCount: 127,
      rating: 4.8,
      examples: [
        "–°—Ç–∞—Ç—å—è '–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å CRM-—Å–∏—Å—Ç–µ–º—É' –¥–ª—è IT-–±–ª–æ–≥–∞",
        "–ú–∞—Ç–µ—Ä–∏–∞–ª '–¢–æ–ø-10 —Ç—Ä–µ–Ω–¥–æ–≤ –≤–µ–±-–¥–∏–∑–∞–π–Ω–∞' –¥–ª—è –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞"
      ],
      createdAt: new Date("2024-01-15")
    },
    {
      id: "2",
      title: "–ü—Ä–æ–¥–∞—é—â–∏–π –ª–µ–Ω–¥–∏–Ω–≥ —Å –ø—Å–∏—Ö–æ–ª–æ–≥–∏–µ–π",
      description: "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–æ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤",
      prompt: "–°–æ–∑–¥–∞–π –ø—Ä–æ–¥–∞—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è [–ü–†–û–î–£–ö–¢/–£–°–õ–£–ì–ê] —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤. –°—Ç—Ä—É–∫—Ç—É—Ä–∞:\n\nüéØ –ó–ê–ì–û–õ–û–í–û–ö:\n- –£–¢–ü + –≤—ã–≥–æ–¥–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞\n- –¶–∏—Ñ—Ä—ã –∏ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞\n\nüò∞ –ü–†–û–ë–õ–ï–ú–ê:\n- –ë–æ–ª–∏ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏\n- –ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è\n- –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ\n\n‚úÖ –†–ï–®–ï–ù–ò–ï:\n- –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∫–∞–∫ —Å–ø–∞—Å–µ–Ω–∏—è\n- –ü—Ä–æ—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n- –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n\nüíé –í–´–ì–û–î–´ (–º–∏–Ω–∏–º—É–º 5):\n- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞\n- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ü–∏—Ñ—Ä–∞—Ö\n- –≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏/–¥–µ–Ω–µ–≥\n\nüë• –°–û–¶–ò–ê–õ–¨–ù–´–ï –î–û–ö–ê–ó–ê–¢–ï–õ–¨–°–¢–í–ê:\n- –û—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å —Ñ–æ—Ç–æ\n- –ö–µ–π—Å—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n- –õ–æ–≥–æ—Ç–∏–ø—ã –∫–æ–º–ø–∞–Ω–∏–π\n\n‚ö° –ü–†–ò–ó–´–í –ö –î–ï–ô–°–¢–í–ò–Æ:\n- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n- –ë–æ–Ω—É—Å—ã –∑–∞ –±—ã—Å—Ç—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ\n- –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º–∞ –∑–∞–∫–∞–∑–∞",
      category: "landing",
      niche: "sales",
      difficulty: "advanced",
      tags: ["–ª–µ–Ω–¥–∏–Ω–≥", "–ø—Ä–æ–¥–∞–∂–∏", "–∫–æ–Ω–≤–µ—Ä—Å–∏—è", "–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è", "—Ç—Ä–∏–≥–≥–µ—Ä—ã"],
      isCustom: false,
      usageCount: 89,
      rating: 4.9,
      examples: [
        "–õ–µ–Ω–¥–∏–Ω–≥ –¥–ª—è –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å–∞ –ø–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É",
        "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–¥–∞–∂–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–æ–Ω–Ω—ã—Ö —É—Å–ª—É–≥"
      ],
      createdAt: new Date("2024-01-20")
    },
    {
      id: "3",
      title: "Email-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å nurturing",
      description: "–°–µ—Ä–∏—è –ø–∏—Å–µ–º –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–æ–≤–µ—Ä–∏—è",
      prompt: "–°–æ–∑–¥–∞–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ [–ö–û–õ–ò–ß–ï–°–¢–í–û] –ø–∏—Å–µ–º –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ —Ç–µ–º—É [–¢–ï–ú–ê]. \n\n–î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∏—Å—å–º–∞:\n\nüìß –ü–ò–°–¨–ú–û ‚Ññ[N]:\nüìå –¢–µ–º–∞: [–¶–µ–ø–ª—è—é—â–∞—è —Ç–µ–º–∞ –±–µ–∑ —Å–ø–∞–º–∞]\nüëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ\nüí° –¶–µ–Ω–Ω–æ—Å—Ç—å: –ü–æ–ª–µ–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç/–∏–Ω—Å–∞–π—Ç\nüìñ –ò—Å—Ç–æ—Ä–∏—è: –õ–∏—á–Ω—ã–π –æ–ø—ã—Ç –∏–ª–∏ –∫–µ–π—Å\nüéØ –ú—è–≥–∫–∏–π CTA: –ù–µ–Ω–∞–≤—è–∑—á–∏–≤—ã–π –ø—Ä–∏–∑—ã–≤\n‚ú® P.S.: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è\n\n–¢–æ–Ω: [–¢–û–ù]\n–¶–µ–ª—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: [–¶–ï–õ–¨]\n\n–ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è –ø–∏—Å–µ–º:\n1. –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ –∏ –ø–µ—Ä–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å\n2. –£–≥–ª—É–±–ª–µ–Ω–∏–µ –≤ –ø—Ä–æ–±–ª–µ–º—É\n3. –†–µ—à–µ–Ω–∏–µ + —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞\n4. –ü—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π\n5. –ú—è–≥–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
      category: "email",
      niche: "marketing",
      difficulty: "intermediate",
      tags: ["email", "—Ä–∞—Å—Å—ã–ª–∫–∞", "–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "nurturing", "–≤–æ—Ä–æ–Ω–∫–∞"],
      isCustom: false,
      usageCount: 64,
      rating: 4.6,
      examples: [
        "–°–µ—Ä–∏—è –¥–ª—è IT-–∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ –æ —Ü–∏—Ñ—Ä–æ–≤–æ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏",
        "–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä–∞"
      ],
      createdAt: new Date("2024-01-25")
    },
    {
      id: "4",
      title: "–í–∏—Ä—É—Å–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π",
      description: "–ö–æ–Ω—Ç–µ–Ω—Ç —Å –≤—ã—Å–æ–∫–∏–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –≤–æ–≤–ª–µ—á–µ–Ω–∏—è",
      prompt: "–°–æ–∑–¥–∞–π –≤–∏—Ä—É—Å–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è [–ü–õ–ê–¢–§–û–†–ú–ê] –Ω–∞ —Ç–µ–º—É [–¢–ï–ú–ê]. \n\nü™ù –•–£–ö (–ø–µ—Ä–≤—ã–µ 3 —Å–ª–æ–≤–∞):\n- –ò–Ω—Ç—Ä–∏–≥—É—é—â–∏–π —Ñ–∞–∫—Ç\n- –ü—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å\n- –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ\n\nüìñ –ò–°–¢–û–†–ò–Ø/–§–ê–ö–¢:\n- –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–∞—á–∞\n- –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏–∏\n- –õ–∏—á–Ω—ã–π –æ–ø—ã—Ç –∏–ª–∏ –∫–µ–π—Å\n\nüí° –ò–ù–°–ê–ô–¢:\n- –¶–µ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç\n- –ù–µ–æ—á–µ–≤–∏–¥–Ω–∞—è —Å–≤—è–∑—å\n- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ\n\nü§î –í–û–í–õ–ï–ß–ï–ù–ò–ï:\n- –í–æ–ø—Ä–æ—Å –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤\n- –ü—Ä–∏–∑—ã–≤ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –º–Ω–µ–Ω–∏–µ–º\n- –ü—Ä–æ—Å—å–±–∞ –æ—Ç–º–µ—Ç–∏—Ç—å –¥—Ä—É–∑–µ–π\n\n#Ô∏è‚É£ –•–≠–®–¢–ï–ì–ò (5-10):\n- –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ —Ç–µ–º–µ\n- –ù–∏—à–µ–≤—ã–µ –¥–ª—è —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥–∞\n- –ë—Ä–µ–Ω–¥–æ–≤—ã–µ\n\n–°—Ç–∏–ª—å: [–°–¢–ò–õ–¨]\n–≠–º–æ–¥–∑–∏: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã\n–î–ª–∏–Ω–∞: –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã",
      category: "social",
      niche: "content",
      difficulty: "intermediate",
      tags: ["—Å–æ—Ü—Å–µ—Ç–∏", "–≤–∏—Ä—É—Å–Ω—ã–π", "–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ", "—Ö—ç—à—Ç–µ–≥–∏", "–∫–æ–Ω—Ç–µ–Ω—Ç"],
      isCustom: false,
      usageCount: 156,
      rating: 4.7,
      examples: [
        "–ü–æ—Å—Ç –æ –º–∏—Ñ–∞—Ö –≤ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–µ –¥–ª—è LinkedIn",
        "–ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—Ö–∞ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è Instagram"
      ],
      createdAt: new Date("2024-02-01")
    },
    {
      id: "5",
      title: "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞",
      description: "–ü—Ä–æ–¥–∞—é—â–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º",
      prompt: "–ù–∞–ø–∏—à–∏ –ø—Ä–æ–¥–∞—é—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ [–¢–û–í–ê–†] –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ [–ü–õ–ê–¢–§–û–†–ú–ê]. \n\nüéØ –ó–ê–ì–û–õ–û–í–û–ö:\n- –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –Ω–∞—á–∞–ª–µ\n- –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏\n- –£–¢–ü —Ç–æ–≤–∞—Ä–∞\n\n‚≠ê –û–°–ù–û–í–ù–´–ï –í–´–ì–û–î–´:\n- –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è\n- –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–æ–≥–∞–º–∏\n- –≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏/–¥–µ–Ω–µ–≥\n\nüîß –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò:\n- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n- –†–∞–∑–º–µ—Ä—ã –∏ –≤–µ—Å\n- –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –∫–∞—á–µ—Å—Ç–≤–æ\n\n‚úÖ –ü–†–ò–ú–ï–ù–ï–ù–ò–ï:\n- –ö–æ–º—É –ø–æ–¥—Ö–æ–¥–∏—Ç\n- –ì–¥–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å\n- –°–æ—á–µ—Ç–∞–µ–º–æ—Å—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏\n\nüèÜ –ö–û–ù–ö–£–†–ï–ù–¢–ù–´–ï –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:\n- –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏\n- –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏ –≥–∞—Ä–∞–Ω—Ç–∏–∏\n- –ù–∞–≥—Ä–∞–¥—ã –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏\n\nüì¶ –î–û–°–¢–ê–í–ö–ê –ò –ì–ê–†–ê–ù–¢–ò–ò:\n- –£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏\n- –ì–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞\n- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—Ç–∞\n\n–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: [–ö–õ–Æ–ß–ï–í–´–ï_–°–õ–û–í–ê]\n–î–ª–∏–Ω–∞: 1000-1500 —Å–∏–º–≤–æ–ª–æ–≤",
      category: "product",
      niche: "ecommerce",
      difficulty: "beginner",
      tags: ["—Ç–æ–≤–∞—Ä", "–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å", "–æ–ø–∏—Å–∞–Ω–∏–µ", "—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏", "–ø—Ä–æ–¥–∞–∂–∏"],
      isCustom: false,
      usageCount: 93,
      rating: 4.5,
      examples: [
        "–û–ø–∏—Å–∞–Ω–∏–µ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞ –¥–ª—è Wildberries",
        "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π –æ–¥–µ–∂–¥—ã –¥–ª—è Ozon"
      ],
      createdAt: new Date("2024-02-05")
    },
    {
      id: "6",
      title: "–°—Ç–æ—Ä–∏—Ç–µ–ª–ª–∏–Ω–≥ –¥–ª—è –±—Ä–µ–Ω–¥–∞",
      description: "–°–æ–∑–¥–∞–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–≤—è–∑–∏ —Å –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π",
      prompt: "–°–æ–∑–¥–∞–π –±—Ä–µ–Ω–¥–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è [–ö–û–ú–ü–ê–ù–ò–Ø] –≤ —Å—Ç–∏–ª–µ —Å—Ç–æ—Ä–∏—Ç–µ–ª–ª–∏–Ω–≥ –Ω–∞ —Ç–µ–º—É [–¢–ï–ú–ê].\n\nüìñ –°–¢–†–£–ö–¢–£–†–ê –ò–°–¢–û–†–ò–ò:\n\nüåü –≠–ö–°–ü–û–ó–ò–¶–ò–Ø:\n- –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –≥–µ—Ä–æ–µ–º (–∫–ª–∏–µ–Ω—Ç/–æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å)\n- –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏ –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∞\n- –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–≤—è–∑—å —Å –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π\n\n‚ö° –ó–ê–í–Ø–ó–ö–ê:\n- –ü—Ä–æ–±–ª–µ–º–∞ –∏–ª–∏ –≤—ã–∑–æ–≤\n- –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–æ–º–Ω–µ–Ω–∏—è\n- –ú–æ–º–µ–Ω—Ç –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è\n\nüî• –†–ê–ó–í–ò–¢–ò–ï:\n- –ü—É—Ç—å –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è\n- –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –∏ –∏—Ö —Ä–µ—à–µ–Ω–∏–µ\n- –†–æ–ª—å –±—Ä–µ–Ω–¥–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏\n\nüéØ –ö–£–õ–¨–ú–ò–ù–ê–¶–ò–Ø:\n- –ü–µ—Ä–µ–ª–æ–º–Ω—ã–π –º–æ–º–µ–Ω—Ç\n- –ö–ª—é—á–µ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ\n- –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞/—É—Å–ª—É–≥–∏\n\n‚ú® –†–ê–ó–í–Ø–ó–ö–ê:\n- –î–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n- –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –≥–µ—Ä–æ—è\n- –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ\n\nüíé –ú–û–†–ê–õ–¨:\n- –¶–µ–Ω–Ω–æ—Å—Ç–∏ –±—Ä–µ–Ω–¥–∞\n- –ü—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å –∫ –∞—É–¥–∏—Ç–æ—Ä–∏–∏\n- –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é\n\n–¢–æ–Ω: –ò—Å–∫—Ä–µ–Ω–Ω–∏–π, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π\n–î–ª–∏–Ω–∞: 500-800 —Å–ª–æ–≤\n–≠–º–æ—Ü–∏–∏: [–≠–ú–û–¶–ò–ò]",
      category: "brand",
      niche: "storytelling",
      difficulty: "advanced",
      tags: ["—Å—Ç–æ—Ä–∏—Ç–µ–ª–ª–∏–Ω–≥", "–±—Ä–µ–Ω–¥", "—ç–º–æ—Ü–∏–∏", "–∏—Å—Ç–æ—Ä–∏—è", "—Å–≤—è–∑—å"],
      isCustom: false,
      usageCount: 45,
      rating: 4.9,
      examples: [
        "–ò—Å—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ä—Ç–∞–ø–∞ –¥–ª—è About-—Å—Ç—Ä–∞–Ω–∏—Ü—ã",
        "–ö–µ–π—Å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"
      ],
      createdAt: new Date("2024-02-10")
    }
  ];

  const [prompts, setPrompts] = useState<PromptItem[]>(defaultPrompts);

  const categories = [
    { value: "all", label: "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" },
    { value: "seo", label: "SEO" },
    { value: "landing", label: "–õ–µ–Ω–¥–∏–Ω–≥–∏" },
    { value: "email", label: "Email" },
    { value: "social", label: "–°–æ—Ü—Å–µ—Ç–∏" },
    { value: "product", label: "–¢–æ–≤–∞—Ä—ã" },
    { value: "brand", label: "–ë—Ä–µ–Ω–¥" },
    { value: "blog", label: "–ë–ª–æ–≥" }
  ];

  const niches = [
    { value: "all", label: "–í—Å–µ –Ω–∏—à–∏" },
    { value: "universal", label: "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ" },
    { value: "sales", label: "–ü—Ä–æ–¥–∞–∂–∏" },
    { value: "marketing", label: "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥" },
    { value: "content", label: "–ö–æ–Ω—Ç–µ–Ω—Ç" },
    { value: "ecommerce", label: "E-commerce" },
    { value: "storytelling", label: "–°—Ç–æ—Ä–∏—Ç–µ–ª–ª–∏–Ω–≥" },
    { value: "tech", label: "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏" },
    { value: "finance", label: "–§–∏–Ω–∞–Ω—Å—ã" },
    { value: "education", label: "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ" }
  ];

  const difficulties = [
    { value: "all", label: "–õ—é–±–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å" },
    { value: "beginner", label: "–ù–∞—á–∏–Ω–∞—é—â–∏–π" },
    { value: "intermediate", label: "–°—Ä–µ–¥–Ω–∏–π" },
    { value: "advanced", label: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π" }
  ];

  const filteredPrompts = prompts.filter(prompt => {
    const matchesSearch = prompt.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         prompt.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         prompt.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()));
    const matchesCategory = categoryFilter === "all" || prompt.category === categoryFilter;
    const matchesNiche = nicheFilter === "all" || prompt.niche === nicheFilter;
    const matchesDifficulty = difficultyFilter === "all" || prompt.difficulty === difficultyFilter;
    return matchesSearch && matchesCategory && matchesNiche && matchesDifficulty;
  });

  const handleCreatePrompt = () => {
    if (!newPrompt.title.trim() || !newPrompt.prompt.trim()) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞",
        variant: "destructive"
      });
      return;
    }

    const prompt: PromptItem = {
      id: Date.now().toString(),
      title: newPrompt.title,
      description: newPrompt.description,
      prompt: newPrompt.prompt,
      category: newPrompt.category,
      niche: newPrompt.niche,
      difficulty: newPrompt.difficulty,
      tags: newPrompt.tags.split(',').map(tag => tag.trim()).filter(Boolean),
      examples: newPrompt.examples ? newPrompt.examples.split('\n').filter(Boolean) : [],
      isCustom: true,
      usageCount: 0,
      rating: 0,
      createdAt: new Date()
    };

    setPrompts(prev => [prompt, ...prev]);
    setNewPrompt({
      title: "",
      description: "",
      prompt: "",
      category: "",
      niche: "",
      difficulty: "",
      tags: "",
      examples: ""
    });
    setShowCreateDialog(false);
    
    toast({
      title: "–ü—Ä–æ–º–ø—Ç —Å–æ–∑–¥–∞–Ω",
      description: "–ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É"
    });
  };

  const usePrompt = (promptId: string) => {
    const prompt = prompts.find(p => p.id === promptId);
    if (prompt) {
      setPrompts(prev => prev.map(p => 
        p.id === promptId 
          ? { ...p, usageCount: p.usageCount + 1 }
          : p
      ));
      onSelectPrompt(prompt.prompt);
      toast({
        title: "–ü—Ä–æ–º–ø—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω",
        description: "–ü—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –≤ —Ñ–æ—Ä–º—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"
      });
    }
  };

  const handlePreviewPrompt = (prompt: PromptItem) => {
    setPreviewPrompt(prompt);
    setShowPreviewDialog(true);
  };

  const copyPrompt = (prompt: string) => {
    navigator.clipboard.writeText(prompt);
    toast({
      title: "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ",
      description: "–ü—Ä–æ–º–ø—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"
    });
  };

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'beginner': return 'bg-green-100 text-green-800';
      case 'intermediate': return 'bg-yellow-100 text-yellow-800';
      case 'advanced': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h3 className="text-xl font-bold">–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤</h3>
          <p className="text-slate-600">–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</p>
        </div>
        <Dialog open={showCreateDialog} onOpenChange={setShowCreateDialog}>
          <DialogTrigger asChild>
            <Button className="bg-purple-600 hover:bg-purple-700">
              <Plus className="w-4 h-4 mr-2" />
              –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–ø—Ç
            </Button>
          </DialogTrigger>
          <DialogContent className="max-w-3xl max-h-[80vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç</DialogTitle>
            </DialogHeader>
            <div className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <Input
                  placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞"
                  value={newPrompt.title}
                  onChange={(e) => setNewPrompt(prev => ({ ...prev, title: e.target.value }))}
                />
                <Input
                  placeholder="–û–ø–∏—Å–∞–Ω–∏–µ"
                  value={newPrompt.description}
                  onChange={(e) => setNewPrompt(prev => ({ ...prev, description: e.target.value }))}
                />
              </div>

              <div className="grid grid-cols-3 gap-4">
                <Select
                  value={newPrompt.category}
                  onValueChange={(value) => setNewPrompt(prev => ({ ...prev, category: value }))}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="–ö–∞—Ç–µ–≥–æ—Ä–∏—è" />
                  </SelectTrigger>
                  <SelectContent>
                    {categories.slice(1).map(cat => (
                      <SelectItem key={cat.value} value={cat.value}>
                        {cat.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>

                <Select
                  value={newPrompt.niche}
                  onValueChange={(value) => setNewPrompt(prev => ({ ...prev, niche: value }))}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="–ù–∏—à–∞" />
                  </SelectTrigger>
                  <SelectContent>
                    {niches.slice(1).map(niche => (
                      <SelectItem key={niche.value} value={niche.value}>
                        {niche.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>

                <Select
                  value={newPrompt.difficulty}
                  onValueChange={(value) => setNewPrompt(prev => ({ ...prev, difficulty: value }))}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="–°–ª–æ–∂–Ω–æ—Å—Ç—å" />
                  </SelectTrigger>
                  <SelectContent>
                    {difficulties.slice(1).map(diff => (
                      <SelectItem key={diff.value} value={diff.value}>
                        {diff.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              <Textarea
                placeholder="–¢–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞"
                value={newPrompt.prompt}
                onChange={(e) => setNewPrompt(prev => ({ ...prev, prompt: e.target.value }))}
                rows={8}
              />

              <div className="grid grid-cols-2 gap-4">
                <Input
                  placeholder="–¢–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é"
                  value={newPrompt.tags}
                  onChange={(e) => setNewPrompt(prev => ({ ...prev, tags: e.target.value }))}
                />
                <Textarea
                  placeholder="–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)"
                  value={newPrompt.examples}
                  onChange={(e) => setNewPrompt(prev => ({ ...prev, examples: e.target.value }))}
                  rows={3}
                />
              </div>

              <div className="flex justify-end gap-2">
                <Button variant="outline" onClick={() => setShowCreateDialog(false)}>
                  –û—Ç–º–µ–Ω–∞
                </Button>
                <Button onClick={handleCreatePrompt}>
                  –°–æ–∑–¥–∞—Ç—å
                </Button>
              </div>
            </div>
          </DialogContent>
        </Dialog>
      </div>

      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <div className="flex items-center gap-4 flex-wrap">
        <div className="relative flex-1 max-w-md">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-slate-400" />
          <Input
            placeholder="–ü–æ–∏—Å–∫ –ø—Ä–æ–º–ø—Ç–æ–≤..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pl-10"
          />
        </div>
        <Select value={categoryFilter} onValueChange={setCategoryFilter}>
          <SelectTrigger className="w-48">
            <SelectValue />
          </SelectTrigger>
          <SelectContent>
            {categories.map(category => (
              <SelectItem key={category.value} value={category.value}>
                {category.label}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
        <Select value={nicheFilter} onValueChange={setNicheFilter}>
          <SelectTrigger className="w-48">
            <SelectValue />
          </SelectTrigger>
          <SelectContent>
            {niches.map(niche => (
              <SelectItem key={niche.value} value={niche.value}>
                {niche.label}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
        <Select value={difficultyFilter} onValueChange={setDifficultyFilter}>
          <SelectTrigger className="w-48">
            <SelectValue />
          </SelectTrigger>
          <SelectContent>
            {difficulties.map(difficulty => (
              <SelectItem key={difficulty.value} value={difficulty.value}>
                {difficulty.label}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>

      {/* –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤ */}
      <div className="space-y-4">
        {filteredPrompts.map((prompt) => (
          <Card key={prompt.id} className="hover:shadow-md transition-shadow">
            <CardHeader className="pb-3">
              <div className="flex items-start justify-between">
                <div className="flex items-center gap-2">
                  <MessageSquare className="w-5 h-5 text-purple-600" />
                  <CardTitle className="text-lg">{prompt.title}</CardTitle>
                </div>
                <div className="flex items-center gap-3 text-sm text-slate-500">
                  <div className="flex items-center gap-1">
                    <Star className="w-4 h-4 fill-yellow-400 text-yellow-400" />
                    {prompt.rating.toFixed(1)}
                  </div>
                  <span>{prompt.usageCount} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π</span>
                </div>
              </div>
              {prompt.description && (
                <p className="text-sm text-slate-600 mt-2">{prompt.description}</p>
              )}
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="bg-slate-50 p-3 rounded-lg">
                <pre className="text-sm whitespace-pre-wrap font-mono line-clamp-4">
                  {prompt.prompt}
                </pre>
              </div>
              
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2 flex-wrap">
                  <Badge variant="outline" className="text-xs">
                    {categories.find(c => c.value === prompt.category)?.label}
                  </Badge>
                  <Badge variant="outline" className="text-xs">
                    {niches.find(n => n.value === prompt.niche)?.label}
                  </Badge>
                  <Badge className={`text-xs ${getDifficultyColor(prompt.difficulty)}`}>
                    {difficulties.find(d => d.value === prompt.difficulty)?.label}
                  </Badge>
                  {prompt.tags.slice(0, 2).map(tag => (
                    <Badge key={tag} variant="secondary" className="text-xs">
                      {tag}
                    </Badge>
                  ))}
                  {prompt.isCustom && (
                    <Badge className="text-xs bg-purple-100 text-purple-800">
                      –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π
                    </Badge>
                  )}
                </div>
                
                <div className="flex items-center gap-2">
                  <Button
                    onClick={() => usePrompt(prompt.id)}
                    size="sm"
                    className="bg-purple-600 hover:bg-purple-700"
                  >
                    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handlePreviewPrompt(prompt)}
                  >
                    <Eye className="w-4 h-4" />
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => copyPrompt(prompt.prompt)}
                  >
                    <Copy className="w-4 h-4" />
                  </Button>
                  {prompt.isCustom && (
                    <>
                      <Button variant="outline" size="sm">
                        <Edit className="w-4 h-4" />
                      </Button>
                      <Button variant="outline" size="sm" className="text-red-600">
                        <Trash2 className="w-4 h-4" />
                      </Button>
                    </>
                  )}
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {filteredPrompts.length === 0 && (
        <div className="text-center py-12">
          <BookOpen className="w-12 h-12 mx-auto mb-4 text-slate-300" />
          <p className="text-lg font-medium text-slate-600 mb-2">–ü—Ä–æ–º–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
          <p className="text-sm text-slate-500">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞</p>
        </div>
      )}

      {/* –î–∏–∞–ª–æ–≥ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ */}
      <Dialog open={showPreviewDialog} onOpenChange={setShowPreviewDialog}>
        <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–º–ø—Ç–∞</DialogTitle>
          </DialogHeader>
          {previewPrompt && (
            <div className="space-y-4">
              <div>
                <h3 className="font-semibold text-lg">{previewPrompt.title}</h3>
                <p className="text-slate-600">{previewPrompt.description}</p>
              </div>

              <div className="flex gap-2 flex-wrap">
                <Badge>{categories.find(c => c.value === previewPrompt.category)?.label}</Badge>
                <Badge variant="outline">{niches.find(n => n.value === previewPrompt.niche)?.label}</Badge>
                <Badge className={getDifficultyColor(previewPrompt.difficulty)}>
                  {difficulties.find(d => d.value === previewPrompt.difficulty)?.label}
                </Badge>
                {previewPrompt.tags.map(tag => (
                  <Badge key={tag} variant="secondary">{tag}</Badge>
                ))}
              </div>

              <div>
                <Label className="text-sm font-medium">–ü–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç:</Label>
                <div className="bg-slate-50 p-4 rounded-lg mt-1">
                  <pre className="text-sm whitespace-pre-wrap font-mono">
                    {previewPrompt.prompt}
                  </pre>
                </div>
              </div>

              {previewPrompt.examples && previewPrompt.examples.length > 0 && (
                <div>
                  <Label className="text-sm font-medium">–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</Label>
                  <ul className="text-sm space-y-1 mt-1 list-disc list-inside">
                    {previewPrompt.examples.map((example, index) => (
                      <li key={index} className="text-slate-600">{example}</li>
                    ))}
                  </ul>
                </div>
              )}

              <div className="flex justify-end gap-2">
                <Button 
                  variant="outline" 
                  onClick={() => copyPrompt(previewPrompt.prompt)}
                >
                  <Copy className="w-4 h-4 mr-2" />
                  –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                </Button>
                <Button variant="outline" onClick={() => setShowPreviewDialog(false)}>
                  –ó–∞–∫—Ä—ã—Ç—å
                </Button>
                <Button 
                  onClick={() => {
                    usePrompt(previewPrompt.id);
                    setShowPreviewDialog(false);
                  }}
                  className="bg-purple-600 hover:bg-purple-700"
                >
                  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç
                </Button>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </div>
  );
}
