
interface SEOOptimizationParams {
  keywords: string;
  keywordDensity: number;
  addHeadings: boolean;
  addInternalLinks: number;
}

interface SEOAnalysis {
  currentDensity: number;
  headingStructure: string[];
  recommendedChanges: string[];
}

class SEOOptimizer {
  async optimizeContent(text: string, params: SEOOptimizationParams): Promise<string> {
    console.log('üéØ –ù–∞—á–∏–Ω–∞–µ–º SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é...');
    
    let optimizedText = text;
    
    // 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const analysis = this.analyzeContent(text, params.keywords);
    console.log('üìä –¢–µ–∫—É—â–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:', analysis.currentDensity + '%');
    
    // 2. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    if (analysis.currentDensity < params.keywordDensity) {
      optimizedText = this.improveKeywordDensity(optimizedText, params.keywords, params.keywordDensity);
    }
    
    // 3. –£–ª—É—á—à–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    if (params.addHeadings) {
      optimizedText = this.improveHeadingStructure(optimizedText);
    }
    
    // 4. –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏
    if (params.addInternalLinks > 0) {
      optimizedText = this.addInternalLinks(optimizedText, params.addInternalLinks);
    }
    
    console.log('‚úÖ SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    return optimizedText;
  }

  private analyzeContent(text: string, keywords: string): SEOAnalysis {
    const words = text.toLowerCase().match(/\b[–∞-—è—ë]+\b/gi) || [];
    const totalWords = words.length;
    
    const keywordList = keywords.toLowerCase().split(',').map(k => k.trim());
    let keywordCount = 0;
    
    keywordList.forEach(keyword => {
      const regex = new RegExp(`\\b${keyword}\\b`, 'gi');
      const matches = text.match(regex) || [];
      keywordCount += matches.length;
    });
    
    const currentDensity = totalWords > 0 ? (keywordCount / totalWords) * 100 : 0;
    
    const headingStructure = text.match(/^#+\s.+$/gm) || [];
    
    return {
      currentDensity: Math.round(currentDensity * 100) / 100,
      headingStructure,
      recommendedChanges: []
    };
  }

  private improveKeywordDensity(text: string, keywords: string, targetDensity: number): string {
    const keywordList = keywords.split(',').map(k => k.trim());
    let result = text;
    
    // –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–∞ –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    const sentences = result.split(/[.!?]+/).filter(s => s.trim().length > 0);
    const wordsCount = result.split(/\s+/).length;
    const targetKeywordCount = Math.ceil((wordsCount * targetDensity) / 100);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —Å–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    const keywordVariations = this.generateKeywordVariations(keywordList);
    
    for (let i = 0; i < Math.min(targetKeywordCount, sentences.length); i++) {
      const randomSentenceIndex = Math.floor(Math.random() * sentences.length);
      const randomKeyword = keywordVariations[Math.floor(Math.random() * keywordVariations.length)];
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
      if (!sentences[randomSentenceIndex].toLowerCase().includes(randomKeyword.toLowerCase())) {
        sentences[randomSentenceIndex] = this.insertKeywordNaturally(sentences[randomSentenceIndex], randomKeyword);
      }
    }
    
    return sentences.join('. ') + '.';
  }

  private generateKeywordVariations(keywords: string[]): string[] {
    const variations: string[] = [];
    
    keywords.forEach(keyword => {
      variations.push(keyword);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞—Ü–∏–∏ —Å –ø—Ä–µ–¥–ª–æ–≥–∞–º–∏
      variations.push(`–≤ —Å—Ñ–µ—Ä–µ ${keyword}`);
      variations.push(`–¥–ª—è ${keyword}`);
      variations.push(`–ø–æ ${keyword}`);
      
      // –î–æ–±–∞–≤–ª—è–µ–º LSI-–≤–∞—Ä–∏–∞—Ü–∏–∏
      if (keyword.includes('–∫–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥')) {
        variations.push('–Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤', '—Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞', '—Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç');
      }
      if (keyword.includes('seo')) {
        variations.push('–ø–æ–∏—Å–∫–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è', '–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –≤ –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞—Ö');
      }
    });
    
    return variations;
  }

  private insertKeywordNaturally(sentence: string, keyword: string): string {
    const insertionPoints = [
      `${sentence.trim()}, –≤–∫–ª—é—á–∞—è ${keyword}`,
      `${sentence.trim()} –≤ –æ–±–ª–∞—Å—Ç–∏ ${keyword}`,
      `–û—Å–æ–±–µ–Ω–Ω–æ —ç—Ç–æ –∫–∞—Å–∞–µ—Ç—Å—è ${keyword}. ${sentence.trim()}`,
      `${sentence.trim()}, —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å ${keyword}`
    ];
    
    return insertionPoints[Math.floor(Math.random() * insertionPoints.length)];
  }

  private improveHeadingStructure(text: string): string {
    const paragraphs = text.split(/\n\s*\n/);
    let result = '';
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    if (!text.includes('#')) {
      // –ü–µ—Ä–≤—ã–π –∞–±–∑–∞—Ü —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è H1
      if (paragraphs.length > 0) {
        result += `# ${this.extractTitleFromText(paragraphs[0])}\n\n`;
        result += paragraphs[0] + '\n\n';
        
        // –î–æ–±–∞–≤–ª—è–µ–º H2 –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫ –∫—Ä—É–ø–Ω—ã–º –∞–±–∑–∞—Ü–∞–º
        for (let i = 1; i < paragraphs.length; i++) {
          if (paragraphs[i].length > 200) {
            result += `## ${this.generateHeadingFromParagraph(paragraphs[i])}\n\n`;
          }
          result += paragraphs[i] + '\n\n';
        }
      }
    } else {
      result = text;
    }
    
    return result.trim();
  }

  private extractTitleFromText(text: string): string {
    const firstSentence = text.split(/[.!?]/)[0];
    return firstSentence.length > 60 ? firstSentence.substring(0, 60) + '...' : firstSentence;
  }

  private generateHeadingFromParagraph(paragraph: string): string {
    const firstSentence = paragraph.split(/[.!?]/)[0];
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const words = firstSentence.split(' ').filter(word => word.length > 3);
    const heading = words.slice(0, 4).join(' ');
    
    return heading.length > 5 ? heading : '–û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã';
  }

  private addInternalLinks(text: string, linkCount: number): string {
    const linkTemplates = [
      '[–ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö](/services)',
      '[—É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ](/pricing)',
      '[—Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏](/contact)',
      '[–ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç](/portfolio)',
      '[–Ω–∞—á–∞—Ç—å –∑–∞–∫–∞–∑](/order)'
    ];
    
    let result = text;
    const sentences = result.split(/[.!?]+/);
    
    for (let i = 0; i < Math.min(linkCount, sentences.length); i++) {
      const randomSentenceIndex = Math.floor(Math.random() * sentences.length);
      const randomLink = linkTemplates[Math.floor(Math.random() * linkTemplates.length)];
      
      if (!sentences[randomSentenceIndex].includes('[')) {
        sentences[randomSentenceIndex] += ` ${randomLink}`;
      }
    }
    
    return sentences.join('. ') + '.';
  }
}

export const seoOptimizer = new SEOOptimizer();
