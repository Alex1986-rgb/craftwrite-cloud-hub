
interface HumanizationSettings {
  level: 'low' | 'medium' | 'high';
  variability: number;
}

class AntiAiProcessor {
  private humanPatterns = {
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∑–∞–º–µ–Ω—ã AI-—à–∞–±–ª–æ–Ω–æ–≤ –Ω–∞ –±–æ–ª–µ–µ —á–µ–ª–æ–≤–µ—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    aiPhrases: [
      { ai: '–í –∑–∞–∫–ª—é—á–µ–Ω–∏–µ', human: ['–ü–æ–¥–≤–æ–¥—è –∏—Ç–æ–≥', '–í –∏—Ç–æ–≥–µ', '–†–µ–∑—é–º–∏—Ä—É—è'] },
      { ai: '–í–∞–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å', human: ['–°—Ç–æ–∏—Ç —É–ø–æ–º—è–Ω—É—Ç—å', '–ù–µ–ª—å–∑—è –Ω–µ —Å–∫–∞–∑–∞—Ç—å', '–û—Ç–º–µ—á—É'] },
      { ai: '–°–ª–µ–¥—É–µ—Ç –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å', human: ['–•–æ—á–µ—Ç—Å—è –≤—ã–¥–µ–ª–∏—Ç—å', '–û–±—Ä–∞—â—É –≤–Ω–∏–º–∞–Ω–∏–µ', '–ü–æ–¥—á–µ—Ä–∫–Ω—É'] },
      { ai: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–Ω–∏–º–∞—Ç—å', human: ['–í–∞–∂–Ω–æ –∑–Ω–∞—Ç—å', '–°—Ç–æ–∏—Ç –ø–æ–º–Ω–∏—Ç—å', '–£—á—Ç–∏—Ç–µ'] },
      { ai: '–í –¥–∞–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ', human: ['–í —ç—Ç–æ–º —Å–ª—É—á–∞–µ', '–ó–¥–µ—Å—å', '–í –¥–∞–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏'] },
      { ai: '–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º', human: ['–¢–∞–∫', '–ü–æ—ç—Ç–æ–º—É', '–°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ'] },
      { ai: '–í —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–∏—Ä–µ', human: ['–°–µ–≥–æ–¥–Ω—è', '–í –Ω–∞—à–µ –≤—Ä–µ–º—è', '–°–µ–π—á–∞—Å'] },
      { ai: '–ë–µ–∑—É—Å–ª–æ–≤–Ω–æ', human: ['–ö–æ–Ω–µ—á–Ω–æ', '–ù–µ—Å–æ–º–Ω–µ–Ω–Ω–æ', '–û—á–µ–≤–∏–¥–Ω–æ'] }
    ],
    
    // –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
    transitions: [
      '–ö—Å—Ç–∞—Ç–∏', '–ö —Å–ª–æ–≤—É', '–ú–µ–∂–¥—É –ø—Ä–æ—á–∏–º', '–î–∞ –∏', '–ö —Ç–æ–º—É –∂–µ',
      '–ë–æ–ª–µ–µ —Ç–æ–≥–æ', '–ü–ª—é—Å –∫ —ç—Ç–æ–º—É', '–ê –µ—â–µ', '–ù–µ –≥–æ–≤–æ—Ä—è —É–∂–µ –æ —Ç–æ–º, —á—Ç–æ'
    ],
    
    // –í–≤–æ–¥–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∂–∏–≤–æ—Å—Ç–∏
    introductions: [
      '–ß–µ—Å—Ç–Ω–æ –≥–æ–≤–æ—Ä—è', '–ü–æ –æ–ø—ã—Ç—É –∑–Ω–∞—é', '–°–∫–∞–∂—É –ø—Ä—è–º–æ',
      '–ò–∑ –ø—Ä–∞–∫—Ç–∏–∫–∏', '–ö–∞–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø—ã—Ç', '–ù–∞ —Å–∞–º–æ–º –¥–µ–ª–µ'
    ]
  };

  async humanizeText(text: string, settings: HumanizationSettings): Promise<string> {
    console.log(`ü§ñ‚û°Ô∏èüë§ –ù–∞—á–∏–Ω–∞–µ–º –≥—É–º–∞–Ω–∏–∑–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ (—É—Ä–æ–≤–µ–Ω—å: ${settings.level})`);
    
    let humanizedText = text;
    
    // 1. –ó–∞–º–µ–Ω—è–µ–º AI-—à–∞–±–ª–æ–Ω—ã –Ω–∞ —á–µ–ª–æ–≤–µ—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    humanizedText = this.replaceAiPhrases(humanizedText, settings.level);
    
    // 2. –î–æ–±–∞–≤–ª—è–µ–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
    humanizedText = this.addNaturalTransitions(humanizedText, settings.variability);
    
    // 3. –†–∞–∑–±–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    humanizedText = this.varysentenceStructure(humanizedText, settings.level);
    
    // 4. –î–æ–±–∞–≤–ª—è–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
    humanizedText = this.addHumanTouches(humanizedText, settings.level);
    
    // 5. –°–æ–∑–¥–∞–µ–º –Ω–µ–±–æ–ª—å—à–∏–µ "–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ" –æ—à–∏–±–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è high —É—Ä–æ–≤–Ω—è)
    if (settings.level === 'high') {
      humanizedText = this.addSubtleHumanErrors(humanizedText);
    }
    
    console.log('‚úÖ –ì—É–º–∞–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    return humanizedText;
  }

  private replaceAiPhrases(text: string, level: HumanizationSettings['level']): string {
    let result = text;
    
    const replacementCount = level === 'high' ? 0.8 : level === 'medium' ? 0.5 : 0.3;
    
    this.humanPatterns.aiPhrases.forEach(pattern => {
      if (Math.random() < replacementCount) {
        const regex = new RegExp(pattern.ai, 'gi');
        const randomReplacement = pattern.human[Math.floor(Math.random() * pattern.human.length)];
        result = result.replace(regex, randomReplacement);
      }
    });
    
    return result;
  }

  private addNaturalTransitions(text: string, variability: number): string {
    const sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 0);
    
    for (let i = 1; i < sentences.length; i++) {
      if (Math.random() < variability * 0.3) {
        const transition = this.humanPatterns.transitions[
          Math.floor(Math.random() * this.humanPatterns.transitions.length)
        ];
        sentences[i] = ` ${transition}, ${sentences[i].trim()}`;
      }
    }
    
    return sentences.join('.') + '.';
  }

  private varysentenceStructure(text: string, level: HumanizationSettings['level']): string {
    let result = text;
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    result = this.breakLongSentences(result);
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    result = this.combineShortSentences(result);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    if (level !== 'low') {
      result = this.varySentenceBeginnings(result);
    }
    
    return result;
  }

  private breakLongSentences(text: string): string {
    return text.replace(/([^.!?]{120,}?),\s+([–∞-—è—ë])/gi, (match, part1, part2) => {
      return `${part1}. ${part2.toUpperCase()}`;
    });
  }

  private combineShortSentences(text: string): string {
    return text.replace(/([.!?])\s+([–ê-–Ø–Å][–∞-—è—ë]{1,20}[.!?])/g, (match, punct1, sentence2) => {
      if (Math.random() < 0.3) {
        return `, ${sentence2.charAt(0).toLowerCase()}${sentence2.slice(1)}`;
      }
      return match;
    });
  }

  private varySentenceBeginnings(text: string): string {
    const sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 0);
    
    for (let i = 0; i < sentences.length; i++) {
      if (Math.random() < 0.2 && sentences[i].trim().length > 50) {
        const intro = this.humanPatterns.introductions[
          Math.floor(Math.random() * this.humanPatterns.introductions.length)
        ];
        sentences[i] = ` ${intro}, ${sentences[i].trim().charAt(0).toLowerCase()}${sentences[i].trim().slice(1)}`;
      }
    }
    
    return sentences.join('.') + '.';
  }

  private addHumanTouches(text: string, level: HumanizationSettings['level']): string {
    let result = text;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∞–∫—Ü–µ–Ω—Ç—ã
    const emotionalWords = [
      { neutral: '—Ö–æ—Ä–æ—à–æ', emotional: '–æ—Ç–ª–∏—á–Ω–æ' },
      { neutral: '–ø–ª–æ—Ö–æ', emotional: '—É–∂–∞—Å–Ω–æ' },
      { neutral: '–º–Ω–æ–≥–æ', emotional: '–º–∞—Å—Å–∞' },
      { neutral: '–±—ã—Å—Ç—Ä–æ', emotional: '–º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ' },
      { neutral: '–≤–∞–∂–Ω–æ', emotional: '–∫—Ä–∞–π–Ω–µ –≤–∞–∂–Ω–æ' }
    ];
    
    if (level !== 'low') {
      emotionalWords.forEach(pair => {
        if (Math.random() < 0.3) {
          const regex = new RegExp(`\\b${pair.neutral}\\b`, 'gi');
          result = result.replace(regex, pair.emotional);
        }
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ª–∏—á–Ω—ã–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è
    if (level === 'high') {
      result = this.addPersonalTouch(result);
    }
    
    return result;
  }

  private addPersonalTouch(text: string): string {
    let result = text;
    
    // –ó–∞–º–µ–Ω—è–µ–º –±–µ–∑–ª–∏—á–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∞ –ª–∏—á–Ω—ã–µ
    const personalizations = [
      { impersonal: '–º–æ–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å', personal: '—è –±—ã —Å–∫–∞–∑–∞–ª' },
      { impersonal: '—Å–ª–µ–¥—É–µ—Ç –æ—Ç–º–µ—Ç–∏—Ç—å', personal: '–æ—Ç–º–µ—á—É' },
      { impersonal: '—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è', personal: '—Ä–µ–∫–æ–º–µ–Ω–¥—É—é' },
      { impersonal: '—Å—Ç–æ–∏—Ç —É–ø–æ–º—è–Ω—É—Ç—å', personal: '—É–ø–æ–º—è–Ω—É' }
    ];
    
    personalizations.forEach(pair => {
      if (Math.random() < 0.4) {
        const regex = new RegExp(pair.impersonal, 'gi');
        result = result.replace(regex, pair.personal);
      }
    });
    
    return result;
  }

  private addSubtleHumanErrors(text: string): string {
    let result = text;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ "—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ" –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
    // –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–ª–æ–≤ (—Ä–µ–¥–∫–æ)
    if (Math.random() < 0.1) {
      const words = result.split(' ');
      const randomIndex = Math.floor(Math.random() * words.length);
      if (words[randomIndex] && words[randomIndex].length > 4) {
        words[randomIndex] = `${words[randomIndex]}, ${words[randomIndex]}`;
        result = words.join(' ');
      }
    }
    
    // –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –≤–∞—Ä–∏–∞—Ü–∏–∏
    result = result.replace(/\b–∏\b/g, (match, offset) => {
      return Math.random() < 0.05 ? '–∞ —Ç–∞–∫–∂–µ' : match;
    });
    
    return result;
  }
}

export const antiAiProcessor = new AntiAiProcessor();
