
interface SynonymDatabase {
  [word: string]: string[];
}

class SynonymReplacer {
  private synonyms: SynonymDatabase = {
    // –ë–∞–∑–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å —Å–∏–Ω–æ–Ω–∏–º–æ–≤
    '—Å–æ–∑–¥–∞—Ç—å': ['—Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å', '—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å', '–ø–æ—Å—Ç—Ä–æ–∏—Ç—å', '—Å–¥–µ–ª–∞—Ç—å', '–∏–∑–≥–æ—Ç–æ–≤–∏—Ç—å'],
    '–≤–∞–∂–Ω–æ': ['–∑–Ω–∞—á–∏–º–æ', '—Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ', '–ø—Ä–∏–Ω—Ü–∏–ø–∏–∞–ª—å–Ω–æ', '–∫—Ä–∏—Ç–∏—á–Ω–æ', '–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ'],
    '–∫–æ–º–ø–∞–Ω–∏—è': ['–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è', '–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ', '—Ñ–∏—Ä–º–∞', '–±–∏–∑–Ω–µ—Å', '–∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—è'],
    '—É—Å–ª—É–≥–∞': ['—Å–µ—Ä–≤–∏—Å', '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', '–ø—Ä–æ–¥—É–∫—Ç', '—Ä–µ—à–µ–Ω–∏–µ'],
    '–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π': ['–ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—ã–π', '–æ—Ç–ª–∏—á–Ω—ã–π', '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π', '–≤—ã—Å–æ–∫–æ–∫–ª–∞—Å—Å–Ω—ã–π'],
    '–±—ã—Å—Ç—Ä–æ': ['–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ', '—Å—Ä–æ—á–Ω–æ', '–Ω–µ–∑–∞–º–µ–¥–ª–∏—Ç–µ–ª—å–Ω–æ', '–º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ'],
    '—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π': ['—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω—ã–π', '–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π', '–¥–µ–π—Å—Ç–≤–µ–Ω–Ω—ã–π', '—É—Å–ø–µ—à–Ω—ã–π'],
    '–∫–ª–∏–µ–Ω—Ç': ['–∑–∞–∫–∞–∑—á–∏–∫', '–ø–æ–∫—É–ø–∞—Ç–µ–ª—å', '–ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'],
    '—Ä–∞–±–æ—Ç–∞': ['–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '—Ç—Ä—É–¥', '–ø—Ä–æ—Ü–µ—Å—Å', '–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ', '—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'],
    '—Ä–µ–∑—É–ª—å—Ç–∞—Ç': ['–∏—Ç–æ–≥', '–∏—Å—Ö–æ–¥', '–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ', '—ç—Ñ—Ñ–µ–∫—Ç', '–ø–ª–æ–¥'],
    '—Ä–µ—à–µ–Ω–∏–µ': ['–≤—ã—Ö–æ–¥', '—Å–ø–æ—Å–æ–±', '–º–µ—Ç–æ–¥', '–≤–∞—Ä–∏–∞–Ω—Ç', '–ø–æ–¥—Ö–æ–¥'],
    '–ø—Ä–æ–±–ª–µ–º–∞': ['–≤–æ–ø—Ä–æ—Å', '–∑–∞–¥–∞—á–∞', '—Ç—Ä—É–¥–Ω–æ—Å—Ç—å', '—Å–ª–æ–∂–Ω–æ—Å—Ç—å', '–ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ'],
    '–ø–æ–ª—É—á–∏—Ç—å': ['–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏', '–æ–±—Ä–µ—Å—Ç–∏', '–¥–æ–±–∏—Ç—å—Å—è', '–¥–æ—Å—Ç–∏—á—å', '–∑–∞–ø–æ–ª—É—á–∏—Ç—å'],
    '–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å': ['–ø—Ä–∏–º–µ–Ω—è—Ç—å', '–∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å', '—ç–∫—Å–ø–ª—É–∞—Ç–∏—Ä–æ–≤–∞—Ç—å', '–ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å'],
    '—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π': ['–∞–∫—Ç—É–∞–ª—å–Ω—ã–π', '–Ω–æ–≤–µ–π—à–∏–π', '–ø–µ—Ä–µ–¥–æ–≤–æ–π', '–∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π'],
    '–ø–æ–ø—É–ª—è—Ä–Ω—ã–π': ['–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã–π', '–∏–∑–≤–µ—Å—Ç–Ω—ã–π', '—Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–π', '–º–æ–¥–Ω—ã–π'],
    '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç': ['—ç–∫—Å–ø–µ—Ä—Ç', '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª', '–º–∞—Å—Ç–µ—Ä', '–∑–Ω–∞—Ç–æ–∫'],
    '–ø–æ–º–æ—á—å': ['—Å–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å', '—Å–ø–æ—Å–æ–±—Å—Ç–≤–æ–≤–∞—Ç—å', '–ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å', '–≤—ã—Ä—É—á–∏—Ç—å'],
    '–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å': ['–¥–∞—Ç—å', '–æ–±–µ—Å–ø–µ—á–∏—Ç—å', '–ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å', '—Å–Ω–∞–±–¥–∏—Ç—å'],
    '–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ': ['–Ω—É–∂–Ω–æ', '—Ç—Ä–µ–±—É–µ—Ç—Å—è', '—Å–ª–µ–¥—É–µ—Ç', '–≤–∞–∂–Ω–æ'],
    '–ø–æ–∑–≤–æ–ª—è–µ—Ç': ['–¥–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', '–æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç', '—Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç', '–ø–æ–º–æ–≥–∞–µ—Ç'],
    '—É–≤–µ–ª–∏—á–∏—Ç—å': ['–ø–æ–≤—ã—Å–∏—Ç—å', '–Ω–∞—Ä–∞—Å—Ç–∏—Ç—å', '–ø–æ–¥–Ω—è—Ç—å', '—Ä–∞—Å—à–∏—Ä–∏—Ç—å', '—É—Å–∏–ª–∏—Ç—å'],
    '—É–ª—É—á—à–∏—Ç—å': ['—É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞—Ç—å', '–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å', '–º–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å', '—Ä–∞–∑–≤–∏—Ç—å']
  };

  async improvePlainText(text: string, duplicateFragments: Array<{text: string, sources: string[], percentage: number}>): Promise<string> {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞...');
    
    let improvedText = text;
    
    // –ó–∞–º–µ–Ω—è–µ–º —Å–ª–æ–≤–∞ –∏–∑ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
    for (const fragment of duplicateFragments) {
      if (fragment.percentage > 10) { // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        improvedText = this.replaceWordsInFragment(improvedText, fragment.text);
      }
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—â–∞—è —Å–∏–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏—è
    improvedText = this.performGeneralSynonymization(improvedText);
    
    console.log('‚úÖ –°–∏–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    return improvedText;
  }

  private replaceWordsInFragment(text: string, duplicateFragment: string): string {
    let result = text;
    
    // –†–∞–∑–±–∏–≤–∞–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç –Ω–∞ —Å–ª–æ–≤–∞ –∏ –∏—â–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
    const words = duplicateFragment.toLowerCase().match(/\b[–∞-—è—ë]+\b/gi) || [];
    
    for (const word of words) {
      const synonyms = this.synonyms[word.toLowerCase()];
      if (synonyms && synonyms.length > 0) {
        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–∏–Ω–æ–Ω–∏–º
        const randomSynonym = synonyms[Math.floor(Math.random() * synonyms.length)];
        
        // –ó–∞–º–µ–Ω—è–µ–º —Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞
        const regex = new RegExp(`\\b${this.escapeRegExp(word)}\\b`, 'gi');
        result = result.replace(regex, (match) => {
          return this.preserveCase(match, randomSynonym);
        });
      }
    }
    
    return result;
  }

  private performGeneralSynonymization(text: string): string {
    let result = text;
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å–ª–æ–≤–∞–º –≤ —Å–ª–æ–≤–∞—Ä–µ —Å–∏–Ω–æ–Ω–∏–º–æ–≤
    Object.entries(this.synonyms).forEach(([originalWord, synonyms]) => {
      if (synonyms.length > 0) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∑–∞–º–µ–Ω—ã 30%
        if (Math.random() < 0.3) {
          const randomSynonym = synonyms[Math.floor(Math.random() * synonyms.length)];
          const regex = new RegExp(`\\b${this.escapeRegExp(originalWord)}\\b`, 'gi');
          
          result = result.replace(regex, (match) => {
            return this.preserveCase(match, randomSynonym);
          });
        }
      }
    });
    
    return result;
  }

  private preserveCase(original: string, replacement: string): string {
    if (original === original.toUpperCase()) {
      return replacement.toUpperCase();
    }
    if (original === original.toLowerCase()) {
      return replacement.toLowerCase();
    }
    if (original[0] === original[0].toUpperCase()) {
      return replacement.charAt(0).toUpperCase() + replacement.slice(1).toLowerCase();
    }
    return replacement.toLowerCase();
  }

  private escapeRegExp(string: string): string {
    return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–∏–Ω–æ–Ω–∏–º–æ–≤
  addSynonyms(word: string, synonyms: string[]): void {
    this.synonyms[word.toLowerCase()] = synonyms;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –¥–ª—è —Å–ª–æ–≤–∞
  getSynonyms(word: string): string[] {
    return this.synonyms[word.toLowerCase()] || [];
  }
}

export const synonymReplacer = new SynonymReplacer();
